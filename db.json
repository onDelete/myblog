{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/imgs/ali.png","path":"imgs/ali.png","modified":0,"renderable":0},{"_id":"source/imgs/weixin.png","path":"imgs/weixin.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/imgs/flower.jpeg","path":"imgs/flower.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1477190322929},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1477190322929},{"_id":"themes/next/_config.yml","hash":"8d0cdef84fff6d7154373ed0d1d20801610b81e4","modified":1480000495131},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1477190322929},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1477190322929},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1477190322937},{"_id":"source/_posts/ExceptionBP.md","hash":"fff975431252d0a2e056ae23588b41a71ac23439","modified":1477190322873},{"_id":"source/_posts/IOdis.md","hash":"083eb98e7b916dd37c24e4e5b51715a632fe8757","modified":1479742300182},{"_id":"source/_posts/alias.md","hash":"bd5a9c19813a8740c6fde18dc50c6d74dba0f74d","modified":1477803864767},{"_id":"source/_posts/arrayAnalysis.md","hash":"5843bd6a8f54f4c415cd47b497acf59af7d8b285","modified":1477190322873},{"_id":"source/_posts/bwcq.md","hash":"8f04d64dde1b31ed7c1bbc7b328ff5d18f9a2d83","modified":1479875194937},{"_id":"source/_posts/configJavaEnvVar.md","hash":"49ad23291c2c94f0d9a79db53577d68a5bb9fbe9","modified":1477190322873},{"_id":"source/_posts/file.md","hash":"0e68f7d560ef7b6c6ca0461661fdcfcf7ef8fc39","modified":1477660230191},{"_id":"source/_posts/generic.md","hash":"a33ea64a071d4a69659e39c1815529cd0194afe3","modified":1477569523542},{"_id":"source/_posts/hexo常用操作.md","hash":"40a863a64c834727d9b574d1ae9110478b737a60","modified":1477209339582},{"_id":"source/_posts/ideaKeymap.md","hash":"4ef2d7b213ea93b87eb821f069c948424f79478b","modified":1479999758699},{"_id":"source/_posts/javaGC01.md","hash":"9fcac49650e067da6e782e40b22b77c2cb90be60","modified":1477190322873},{"_id":"source/_posts/ln.md","hash":"6c0004566a7fb81725c959a6d9affe2613a4b598","modified":1477645891602},{"_id":"source/_posts/multithread.md","hash":"ec979d94cd22c32cbef523381abbc9e2e6d23def","modified":1479742360613},{"_id":"source/_posts/readLittlePrince.md","hash":"66571a9c4b8e289c3e82d0bc81b1f5e877b8239e","modified":1477190322873},{"_id":"source/_posts/newcodetest.md","hash":"d9b1575ffda4f455d86d09dde9b7a55955dbed46","modified":1480061410588},{"_id":"source/_posts/sha1.md","hash":"228fbf4bd3c963dc8d1943a72ff23c0e84d6e540","modified":1477190322877},{"_id":"source/_posts/tips1.md","hash":"66d89ea1300c487b5d9a1a55f0a0297762327f00","modified":1478000172281},{"_id":"source/_posts/ubuntuEnv.md","hash":"f6a012ee0ca43ecbd1a7fd9142e06e63473f1c0f","modified":1477200826929},{"_id":"source/_posts/关于部署blog时重复输入用户名和密码的问题.md","hash":"3ede1548b514b10d9149f08f5da8cb99d26fc6db","modified":1477190322877},{"_id":"source/_posts/实习.md","hash":"dc9ed1c6a614f4c0ccc7a8da739acaffcfdd57de","modified":1477227469497},{"_id":"source/about/index.md","hash":"be32a5502a16488b8657346054e12352ee9dc918","modified":1480000472872},{"_id":"source/categories/index.md","hash":"bcef3fb3ca486e74972f628d4a49cef206a88b8c","modified":1477190322877},{"_id":"source/tags/index.md","hash":"9d417e38d80009225af83d0f32f9a39789e0460c","modified":1477190322913},{"_id":"source/imgs/ali.png","hash":"718ce51ab24af6b9004b491d2b9171395f558431","modified":1477190322877},{"_id":"source/_posts/mapIterator.md","hash":"a3d2b14fbf78ff2be0b175fdb5c038375c7d8421","modified":1477190322873},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1477190322929},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1477190322929},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1477190322929},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1477190322929},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1477190322929},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1477190322929},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1477190322929},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1477190322929},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1477190322929},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1477190322929},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1477190322929},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1477190322929},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1477190322929},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1477190322937},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1477190322929},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1477190322933},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1477190322933},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1477190322933},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1477190322933},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1477190322937},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1477190322933},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1477190322957},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1477190322957},{"_id":"source/imgs/weixin.png","hash":"14f6489da547ec1df9941db880f2291e00349252","modified":1477190322913},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1477190322937},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1477190322937},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1477190322937},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1477190322929},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1477190322929},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1477190322929},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1477190322933},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1477190322933},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1477190322933},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1477190322933},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d6314764ba0316a4dc9beb282504c106858454fb","modified":1477190322933},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1477190322933},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1477190322933},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1477190322933},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1477190322933},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1477190322933},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1477190322933},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1477190322933},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1477190322933},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1477190322945},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1477190322945},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1477190322945},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1477190322945},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1477190322945},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1477190322945},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1477190322945},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1477190322945},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477190322945},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477190322945},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1477190322945},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1477190322945},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1477190322945},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477190322933},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477190322933},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477190322941},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477190322941},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477190322941},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477190322941},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477190322945},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1477190322933},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1477190322933},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1477190322933},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1477190322933},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1477190322933},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1477190322933},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1477190322933},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1477190322933},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1477190322933},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1477190322933},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1477190322941},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1477190322941},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1477190322941},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1477190322941},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1477190322945},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1477190322945},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1477190322945},{"_id":"themes/next/source/images/avatar.gif","hash":"3ddb9882caf0b0f833b795a6344e657e81ec0fec","modified":1477190322945},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1477190322945},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1477190322945},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1477190322945},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1477190322945},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1477190322945},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1477190322945},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1477190322949},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1477190322949},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1477190322949},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1477190322949},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1477190322949},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1477190322957},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1477190322957},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1477190322957},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1477190322957},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1477190322957},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1477190322957},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1477190322957},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1477190322957},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1477190322957},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1477190322957},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1477190322933},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1477190322933},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1477190322941},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1477190322937},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1477190322941},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1477190322941},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1477190322941},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1477190322941},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1477190322941},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1477190322945},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1477190322949},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1477190322949},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1477190322949},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1477190322949},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1477190322949},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1477190322949},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1477190322953},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1477190322957},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1477190322957},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1477190322953},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1477190322953},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1477190322953},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1477190322957},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1477190322937},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1477190322941},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1477190322941},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1477190322941},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1477190322941},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1477190322941},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1477190322941},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1477190322941},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477190322941},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477190322941},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1477190322949},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1477190322949},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1477190322953},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1477190322953},{"_id":"source/imgs/flower.jpeg","hash":"5b9708b61c20314cb2dde67c4940b528191188d9","modified":1477190322913},{"_id":"public/about/index.html","hash":"d6cdeade5c7dd945b51391a8db8a2f83fcf2937a","modified":1480061434565},{"_id":"public/tags/index.html","hash":"be8cd1af5c572f72013325773908223716e67deb","modified":1480061434566},{"_id":"public/categories/index.html","hash":"cb0ad97906735f1743059d6bf6e92085f8ce6dfe","modified":1480061434567},{"_id":"public/archives/page/4/index.html","hash":"810b9ac96f0ad142f699b9a58353242b5039b767","modified":1480061434567},{"_id":"public/archives/2016/page/4/index.html","hash":"bf0825122efe010a697e0934582e9fe6f9bd5956","modified":1480061434567},{"_id":"public/archives/2016/10/page/3/index.html","hash":"95ba79e42e8745bb539fefe698964982a9604750","modified":1480061434567},{"_id":"public/categories/linux/index.html","hash":"e925f845e7e6563accbed8abec336bd5dc52b4c1","modified":1480061434567},{"_id":"public/categories/JavaSE/page/2/index.html","hash":"6c4ca6ee9a9e1e554edb8a6c72153e2d5766d91c","modified":1480061434567},{"_id":"public/categories/一天一个linux命令/index.html","hash":"9ea510d37bacfd90f8cd43421b64ffb1c030c1dc","modified":1480061434567},{"_id":"public/categories/在哪/index.html","hash":"97174b9a8c404dc96eda34d9f5c025688d0d8f8a","modified":1480061434568},{"_id":"public/categories/开发工具/index.html","hash":"0f89ec7b64ec35114d22cce4cdebb4a8e0d02399","modified":1480061434568},{"_id":"public/categories/博客构建/index.html","hash":"38885b71ea216cdd7e13c235febf7f88d235af2c","modified":1480061434568},{"_id":"public/categories/mood/index.html","hash":"b52d45119b1f698d41fb7a284a0c531788badec8","modified":1480061434568},{"_id":"public/tags/IO/index.html","hash":"18360af3da1450776f1cd016de302416636530fc","modified":1480061434568},{"_id":"public/tags/Exception/index.html","hash":"3b94f8542e672651ca9fcd0e5dc11941e5483d26","modified":1480061434568},{"_id":"public/tags/linux/index.html","hash":"d32fbb58d4d8f53e9276d476fab9cbcad6867d2c","modified":1480061434568},{"_id":"public/tags/array/index.html","hash":"6db329b1b84331ac50efcc9c0d0f504b81c827bf","modified":1480061434568},{"_id":"public/tags/重庆/index.html","hash":"cb4851f7147d317cebcd4b61471e1a94c044cf03","modified":1480061434568},{"_id":"public/tags/java环境变量/index.html","hash":"a0af9fc544653536c0cb701f93ae1a420e4759a7","modified":1480061434568},{"_id":"public/tags/File/index.html","hash":"2e632583adb357e19cd60dd3c52273a2d0a56fd6","modified":1480061434569},{"_id":"public/tags/泛型/index.html","hash":"3542cc7fe6e7ef8726b650cb5c6a81403a0d0d50","modified":1480061434569},{"_id":"public/tags/idea/index.html","hash":"b6e61985d88ec359edb89b186b8edb34aff64f3f","modified":1480061434569},{"_id":"public/tags/hexo/index.html","hash":"866756020fbd48116336400b9bf8660dd937719d","modified":1480061434569},{"_id":"public/tags/GC/index.html","hash":"c2bb1f8fd597f1b5a943460fc10f3218bcfb9454","modified":1480061434569},{"_id":"public/tags/多线程/index.html","hash":"29ccf56a48a3a8c0f681331858e0609dfaebbbfb","modified":1480061434569},{"_id":"public/tags/reading-books/index.html","hash":"5f66146b744b104f014036ecd13922c3d66f1e7c","modified":1480061434569},{"_id":"public/tags/面试/index.html","hash":"5d2991b4fc8b1abd4560a998d9674165d1a5e138","modified":1480061434569},{"_id":"public/tags/sha1/index.html","hash":"8ed891813d42bde39704a6b69b70423bc6e5809f","modified":1480061434569},{"_id":"public/tags/tips/index.html","hash":"087c3b19bc5308299fe85e97a39cc96ddc0bf9cf","modified":1480061434569},{"_id":"public/tags/maven/index.html","hash":"8ba58ff1ca38e2320d851a2d05fefc5e8d5a4086","modified":1480061434569},{"_id":"public/tags/tomcat/index.html","hash":"139fb878ee6d19025edd9e463d965182bbd5fe56","modified":1480061434569},{"_id":"public/tags/实习/index.html","hash":"8e3589ea2ee5cdfb403724d4a8ea5d805d7d18f5","modified":1480061434570},{"_id":"public/tags/map/index.html","hash":"33b51e3b06013117d6dd0d5117c890d9899f572f","modified":1480061434570},{"_id":"public/tags/iterator/index.html","hash":"01b50294d9153b2366900ce727bdaab4587473c8","modified":1480061434570},{"_id":"public/2016/11/25/newcodetest/index.html","hash":"0008c6091482159733d5ce13fd5367f501ef3347","modified":1480061434570},{"_id":"public/2016/11/24/ideaKeymap/index.html","hash":"f57e7a53a71fd05042b91f6ef5fb2eef74573f4f","modified":1480061434570},{"_id":"public/2016/11/23/bwcq/index.html","hash":"1c3a37f0b34c2e117620a0dce4d7840408b79fc3","modified":1480061434570},{"_id":"public/2016/11/21/IOdis/index.html","hash":"e90ce9469a3216aef9733cb00d468e27e266e8c1","modified":1480061434570},{"_id":"public/2016/11/21/multithread/index.html","hash":"e26f9504608c2e8383e78aee6ac26775db5e4e44","modified":1480061434570},{"_id":"public/2016/11/01/tips1/index.html","hash":"eb29a7d087ed54c5b8e1f497d17052790c4e063d","modified":1480061434570},{"_id":"public/2016/10/30/alias/index.html","hash":"dd234bc903433f1106339a8a1e51fff637da5f81","modified":1480061434570},{"_id":"public/2016/10/28/ln/index.html","hash":"5d745bc6fe77abb505fd064d9985369fcead25e5","modified":1480061434571},{"_id":"public/2016/10/27/file/index.html","hash":"0ba7351c7cbcb5cd846e3c7bea2aa73d178e4b65","modified":1480061434571},{"_id":"public/2016/10/24/generic/index.html","hash":"321e2a41ca389a7a66d55304bb51e53c3174e01a","modified":1480061434571},{"_id":"public/2016/10/23/实习/index.html","hash":"9a13d5966c15cdba3a98bca2929e341f7b8272e8","modified":1480061434571},{"_id":"public/2016/10/23/ubuntuEnv/index.html","hash":"aa4524a6f51b29713c25b1d38014320fa4c9ec0a","modified":1480061434571},{"_id":"public/2016/10/15/sha1/index.html","hash":"26fd20ad1936df9fa44e4f094187ea2059a4d922","modified":1480061434571},{"_id":"public/2016/10/15/javaGC01/index.html","hash":"f8907312173fea9fd07161da5749d2103ae3d837","modified":1480061434571},{"_id":"public/2016/10/12/arrayAnalysis/index.html","hash":"0531ff47aa19ecf5f737e1d2e941ef74dc25649d","modified":1480061434571},{"_id":"public/2016/10/10/ExceptionBP/index.html","hash":"a1c9701100de6c09b09b8ca123bea935dd1d9961","modified":1480061434571},{"_id":"public/2016/10/10/mapIterator/index.html","hash":"b1b5bb1b0b3fad350aa49985902b95a8691b1253","modified":1480061434571},{"_id":"public/2016/10/06/configJavaEnvVar/index.html","hash":"42ce18e2e6493ba90b886c192105af32b0f3db67","modified":1480061434572},{"_id":"public/2016/10/05/hexo常用操作/index.html","hash":"b4c3b86138ab1c68db22d91bc2cce07950c26769","modified":1480061434572},{"_id":"public/2016/10/04/关于部署blog时重复输入用户名和密码的问题/index.html","hash":"767f0bd5815fc5ce89e082b030e2b4604cd563ff","modified":1480061434572},{"_id":"public/2016/10/04/readLittlePrince/index.html","hash":"f180c429a3deac585a99acd07eea782f9fddac99","modified":1480061434572},{"_id":"public/archives/index.html","hash":"64f73a4d58defcf0202ded298f377c33c40aa5fc","modified":1480061434572},{"_id":"public/archives/page/2/index.html","hash":"7b69323d8c9a47c97811fc74f883232ac1f3bb2e","modified":1480061434572},{"_id":"public/archives/page/3/index.html","hash":"86a40867b17c542273b643e5744bbcd59642f954","modified":1480061434572},{"_id":"public/archives/2016/index.html","hash":"db5d51a27ef0827efb7561c25c1176154238a6c3","modified":1480061434572},{"_id":"public/archives/2016/page/2/index.html","hash":"d373ab6d64bc3a2f4ed7447f67ebdbc29ca6fcd2","modified":1480061434572},{"_id":"public/archives/2016/page/3/index.html","hash":"a7adbc8ad3dcd118eedbb8cb119640614fa2f9b4","modified":1480061434573},{"_id":"public/archives/2016/10/index.html","hash":"9579dcdb620e16789fa5a53906733a4b9fd9cccb","modified":1480061434573},{"_id":"public/archives/2016/10/page/2/index.html","hash":"9c91384cace419649ab56818f4d1835832e8d1cd","modified":1480061434573},{"_id":"public/archives/2016/11/index.html","hash":"0244621d460cb9831527634c2dfff4ec36421a46","modified":1480061434573},{"_id":"public/categories/JavaSE/index.html","hash":"94e70df16446ce274d6c93b4f6e56dfe2610f64b","modified":1480061434573},{"_id":"public/index.html","hash":"1778dab6e8f3a0df736662ca296fecac15d99bc0","modified":1480061434573},{"_id":"public/page/2/index.html","hash":"cbf0ee303123deecf614faf6b5a5ec84b4093ed9","modified":1480061434573},{"_id":"public/page/3/index.html","hash":"80f7bc1a8dae41460ed80518719bdee70ae35d82","modified":1480061434573},{"_id":"public/page/4/index.html","hash":"0e59a7246c69cfeabc87df6a08acf10fadb56b94","modified":1480061434573},{"_id":"public/imgs/ali.png","hash":"718ce51ab24af6b9004b491d2b9171395f558431","modified":1480061434585},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480061434585},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480061434586},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480061434586},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480061434586},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480061434586},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480061434586},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480061434586},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480061434586},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480061434586},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480061434586},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480061434586},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480061434586},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480061434587},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1480061434587},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480061434587},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480061434587},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480061434587},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480061434587},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480061434587},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480061434587},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480061434587},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1480061434587},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480061434587},{"_id":"public/imgs/weixin.png","hash":"14f6489da547ec1df9941db880f2291e00349252","modified":1480061436088},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1480061436091},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1480061436097},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1480061436098},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480061436106},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480061436106},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480061436106},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480061436106},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480061436106},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1480061436106},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480061436106},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1480061436106},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1480061436106},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1480061436106},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1480061436106},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1480061436107},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1480061436107},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480061436107},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480061436107},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1480061436107},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480061436107},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480061436107},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480061436107},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480061436107},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480061436107},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480061436107},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480061436108},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480061436108},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480061436108},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480061436108},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480061436108},{"_id":"public/css/main.css","hash":"dbb9dee4b05419f096f0643c826403c849b034bf","modified":1480061436108},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480061436108},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480061436108},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480061436108},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480061436108},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480061436108},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480061436109},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1480061436109},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1480061436109},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480061436110},{"_id":"public/images/avatar.gif","hash":"3ddb9882caf0b0f833b795a6344e657e81ec0fec","modified":1480061436111},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1480061436111},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1480061436130},{"_id":"public/imgs/flower.jpeg","hash":"5b9708b61c20314cb2dde67c4940b528191188d9","modified":1480061436185}],"Category":[{"name":"linux","_id":"civxicz7d0003bakzkbagij69"},{"name":"JavaSE","_id":"civxicz7x0008bakzq4by8uk7"},{"name":"一天一个linux命令","_id":"civxicz8a000ebakzm4mulnse"},{"name":"在哪","_id":"civxicz91000rbakz953341m0"},{"name":"开发工具","_id":"civxicz9g0010bakz42v7it99"},{"name":"博客构建","_id":"civxicz9m0018bakzxf0ji2ju"},{"name":"mood","_id":"civxiczac001pbakzbd2knb24"}],"Data":[],"Page":[{"title":"我想说","date":"2016-10-04T11:11:31.000Z","comments":0,"_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=1934649&auto=0&height=66\"></iframe>\n\n>\"Straight ahead of him,nobody can go very far...\"","source":"about/index.md","raw":"---\ntitle: 我想说\ndate: 2016-10-04 19:11:31\ncomments: false\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=1934649&auto=0&height=66\"></iframe>\n\n>\"Straight ahead of him,nobody can go very far...\"","updated":"2016-11-24T15:14:32.872Z","path":"about/index.html","layout":"page","_id":"civxicz700001bakzof07bbgd","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=1934649&auto=0&height=66\"></iframe>\n\n<blockquote>\n<p>“Straight ahead of him,nobody can go very far…”</p>\n</blockquote>\n","excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=1934649&auto=0&height=66\"></iframe>\n\n<blockquote>\n<p>“Straight ahead of him,nobody can go very far…”</p>\n</blockquote>\n"},{"title":"tags","date":"2016-10-03T11:59:39.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-10-03 19:59:39\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-10-23T02:38:42.913Z","path":"tags/index.html","layout":"page","_id":"civxiczjy002hbakznqwa1269","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-10-03T12:03:55.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-10-03 20:03:55\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-10-23T02:38:42.877Z","path":"categories/index.html","layout":"page","_id":"civxiczk1002jbakzye1g0yrv","content":"","excerpt":"","more":""}],"Post":[{"title":"I/O重定向","date":"2016-11-21T15:28:19.000Z","_content":"### I/O重定向\n在UNIX哲学中，任何东西都是一个文件。我们在使用命令的时候，总是会在终端得到一些输出的结果，或者一些状态的信息。这里得到的标准输出和标准错误，默认情况下，标准输出和标准错误都连接到屏幕，而标准输入则与键盘相连。有时候我们需要做持久化处理，就是把一些输出的结果当作一个文件保存在磁盘上。，这时我们就需要，让输出的结果更改输出的方向，让它不再输出到屏幕。而是输出到文件中。\n#### 重定向标准输出\n使用`>`符可以重定向标准输出：\n`cmds > file`\n但是有些时候我们使用命令不当，会导致控制台出现错误信息，要是我们不小心使用上面的方式，那么就不会将命令执行的结果输出到文件中，并且更重要的是由于我们在执行重定向操作的时候没有将新的内容写入文件，此时文件的内容会被覆盖，但是由于输出的错误信息输出到了控制台，那么我们此时的文件就没有内容，文件的长度为零。现在我们知道`>`符有覆盖文件内容的作用，那么使用：\n`> file`\n可以创建一个新的空文件，因为我们什么都没有输出到新创建的这个文件中。\n如果我们想要追加一些内容到一个文件中，那么就需要我们使用新命令`>>`：\n`cmds >> file`\n#### 重定向标准错误\n上面说当我们试图把一个错误的命令输入一个文件的时候，会将错误的信息输出到屏幕上，那么应该如何解决重定向标准错误的问题呢？\n要想重定向标准错误，需要使用文件描述符。标准输入、输出、错误的描述符分别为0、1、2.使用方式：\n`cmds 2> error.txt`\n要想同时重定向标准输出和错误，可以：\n`cmds > all.txt 2&>1`或者更加简单的：\n`cmds &> all.txt`","source":"_posts/IOdis.md","raw":"---\ntitle: I/O重定向\ndate: 2016-11-21 23:28:19\ntags: IO\ncategories: linux\n---\n### I/O重定向\n在UNIX哲学中，任何东西都是一个文件。我们在使用命令的时候，总是会在终端得到一些输出的结果，或者一些状态的信息。这里得到的标准输出和标准错误，默认情况下，标准输出和标准错误都连接到屏幕，而标准输入则与键盘相连。有时候我们需要做持久化处理，就是把一些输出的结果当作一个文件保存在磁盘上。，这时我们就需要，让输出的结果更改输出的方向，让它不再输出到屏幕。而是输出到文件中。\n#### 重定向标准输出\n使用`>`符可以重定向标准输出：\n`cmds > file`\n但是有些时候我们使用命令不当，会导致控制台出现错误信息，要是我们不小心使用上面的方式，那么就不会将命令执行的结果输出到文件中，并且更重要的是由于我们在执行重定向操作的时候没有将新的内容写入文件，此时文件的内容会被覆盖，但是由于输出的错误信息输出到了控制台，那么我们此时的文件就没有内容，文件的长度为零。现在我们知道`>`符有覆盖文件内容的作用，那么使用：\n`> file`\n可以创建一个新的空文件，因为我们什么都没有输出到新创建的这个文件中。\n如果我们想要追加一些内容到一个文件中，那么就需要我们使用新命令`>>`：\n`cmds >> file`\n#### 重定向标准错误\n上面说当我们试图把一个错误的命令输入一个文件的时候，会将错误的信息输出到屏幕上，那么应该如何解决重定向标准错误的问题呢？\n要想重定向标准错误，需要使用文件描述符。标准输入、输出、错误的描述符分别为0、1、2.使用方式：\n`cmds 2> error.txt`\n要想同时重定向标准输出和错误，可以：\n`cmds > all.txt 2&>1`或者更加简单的：\n`cmds &> all.txt`","slug":"IOdis","published":1,"updated":"2016-11-21T15:31:40.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz6r0000bakzs7dicquw","content":"<h3 id=\"I-O重定向\"><a href=\"#I-O重定向\" class=\"headerlink\" title=\"I/O重定向\"></a>I/O重定向</h3><p>在UNIX哲学中，任何东西都是一个文件。我们在使用命令的时候，总是会在终端得到一些输出的结果，或者一些状态的信息。这里得到的标准输出和标准错误，默认情况下，标准输出和标准错误都连接到屏幕，而标准输入则与键盘相连。有时候我们需要做持久化处理，就是把一些输出的结果当作一个文件保存在磁盘上。，这时我们就需要，让输出的结果更改输出的方向，让它不再输出到屏幕。而是输出到文件中。</p>\n<h4 id=\"重定向标准输出\"><a href=\"#重定向标准输出\" class=\"headerlink\" title=\"重定向标准输出\"></a>重定向标准输出</h4><p>使用<code>&gt;</code>符可以重定向标准输出：<br><code>cmds &gt; file</code><br>但是有些时候我们使用命令不当，会导致控制台出现错误信息，要是我们不小心使用上面的方式，那么就不会将命令执行的结果输出到文件中，并且更重要的是由于我们在执行重定向操作的时候没有将新的内容写入文件，此时文件的内容会被覆盖，但是由于输出的错误信息输出到了控制台，那么我们此时的文件就没有内容，文件的长度为零。现在我们知道<code>&gt;</code>符有覆盖文件内容的作用，那么使用：<br><code>&gt; file</code><br>可以创建一个新的空文件，因为我们什么都没有输出到新创建的这个文件中。<br>如果我们想要追加一些内容到一个文件中，那么就需要我们使用新命令<code>&gt;&gt;</code>：<br><code>cmds &gt;&gt; file</code></p>\n<h4 id=\"重定向标准错误\"><a href=\"#重定向标准错误\" class=\"headerlink\" title=\"重定向标准错误\"></a>重定向标准错误</h4><p>上面说当我们试图把一个错误的命令输入一个文件的时候，会将错误的信息输出到屏幕上，那么应该如何解决重定向标准错误的问题呢？<br>要想重定向标准错误，需要使用文件描述符。标准输入、输出、错误的描述符分别为0、1、2.使用方式：<br><code>cmds 2&gt; error.txt</code><br>要想同时重定向标准输出和错误，可以：<br><code>cmds &gt; all.txt 2&amp;&gt;1</code>或者更加简单的：<br><code>cmds &amp;&gt; all.txt</code></p>\n","excerpt":"","more":"<h3 id=\"I-O重定向\"><a href=\"#I-O重定向\" class=\"headerlink\" title=\"I/O重定向\"></a>I/O重定向</h3><p>在UNIX哲学中，任何东西都是一个文件。我们在使用命令的时候，总是会在终端得到一些输出的结果，或者一些状态的信息。这里得到的标准输出和标准错误，默认情况下，标准输出和标准错误都连接到屏幕，而标准输入则与键盘相连。有时候我们需要做持久化处理，就是把一些输出的结果当作一个文件保存在磁盘上。，这时我们就需要，让输出的结果更改输出的方向，让它不再输出到屏幕。而是输出到文件中。</p>\n<h4 id=\"重定向标准输出\"><a href=\"#重定向标准输出\" class=\"headerlink\" title=\"重定向标准输出\"></a>重定向标准输出</h4><p>使用<code>&gt;</code>符可以重定向标准输出：<br><code>cmds &gt; file</code><br>但是有些时候我们使用命令不当，会导致控制台出现错误信息，要是我们不小心使用上面的方式，那么就不会将命令执行的结果输出到文件中，并且更重要的是由于我们在执行重定向操作的时候没有将新的内容写入文件，此时文件的内容会被覆盖，但是由于输出的错误信息输出到了控制台，那么我们此时的文件就没有内容，文件的长度为零。现在我们知道<code>&gt;</code>符有覆盖文件内容的作用，那么使用：<br><code>&gt; file</code><br>可以创建一个新的空文件，因为我们什么都没有输出到新创建的这个文件中。<br>如果我们想要追加一些内容到一个文件中，那么就需要我们使用新命令<code>&gt;&gt;</code>：<br><code>cmds &gt;&gt; file</code></p>\n<h4 id=\"重定向标准错误\"><a href=\"#重定向标准错误\" class=\"headerlink\" title=\"重定向标准错误\"></a>重定向标准错误</h4><p>上面说当我们试图把一个错误的命令输入一个文件的时候，会将错误的信息输出到屏幕上，那么应该如何解决重定向标准错误的问题呢？<br>要想重定向标准错误，需要使用文件描述符。标准输入、输出、错误的描述符分别为0、1、2.使用方式：<br><code>cmds 2&gt; error.txt</code><br>要想同时重定向标准输出和错误，可以：<br><code>cmds &gt; all.txt 2&amp;&gt;1</code>或者更加简单的：<br><code>cmds &amp;&gt; all.txt</code></p>\n"},{"title":"异常和try...catch...finally最佳实践","date":"2016-10-09T20:26:20.000Z","_content":"有关异常的几点总结：\n<!--more-->\n1.Throwable是Exception和Error的父类，我们能够处理的只有Exception类，一般不要使用Throwable。\n2.Exception定义的异常必须被处理，RuntimeException可以选择性地处理。RuntimeException包含有算术异常、空指针异常、类型转换异常等。\n3.try...catch...finally使用的标准格式：\n```java\npublic class ExceptionStanfordStyle {\n\n\t//在定义方法时throws异常，我们必须使用try...catch来处理异常，在处理时将异常throw到调用处，让调用处进行处理。\n\tpublic static void div(int a,int b) throws Exception{\n\t\tint result = 0;\n\t\tSystem.out.println(\"除法计算开始\");\n\t\ttry {\n\t\t\tresult = a / b;\n\t\t} catch (Exception e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tSystem.out.println(\"除法计算结束\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tExceptionStanfordStyle.div(10, 0);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n4.finally不被调用的情况\n* 使用System.exit();\n* 其他线程干扰了当前线程（通过interrupt方法）;\n* jvm崩溃（crash）;","source":"_posts/ExceptionBP.md","raw":"---\ntitle: 异常和try...catch...finally最佳实践\ndate: 2016-10-10 04:26:20\ntags: [Exception]\ncategories: JavaSE\n---\n有关异常的几点总结：\n<!--more-->\n1.Throwable是Exception和Error的父类，我们能够处理的只有Exception类，一般不要使用Throwable。\n2.Exception定义的异常必须被处理，RuntimeException可以选择性地处理。RuntimeException包含有算术异常、空指针异常、类型转换异常等。\n3.try...catch...finally使用的标准格式：\n```java\npublic class ExceptionStanfordStyle {\n\n\t//在定义方法时throws异常，我们必须使用try...catch来处理异常，在处理时将异常throw到调用处，让调用处进行处理。\n\tpublic static void div(int a,int b) throws Exception{\n\t\tint result = 0;\n\t\tSystem.out.println(\"除法计算开始\");\n\t\ttry {\n\t\t\tresult = a / b;\n\t\t} catch (Exception e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tSystem.out.println(\"除法计算结束\");\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tExceptionStanfordStyle.div(10, 0);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n4.finally不被调用的情况\n* 使用System.exit();\n* 其他线程干扰了当前线程（通过interrupt方法）;\n* jvm崩溃（crash）;","slug":"ExceptionBP","published":1,"updated":"2016-10-23T02:38:42.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz720002bakzznpb6vhd","content":"<p>有关异常的几点总结：<br><a id=\"more\"></a><br>1.Throwable是Exception和Error的父类，我们能够处理的只有Exception类，一般不要使用Throwable。<br>2.Exception定义的异常必须被处理，RuntimeException可以选择性地处理。RuntimeException包含有算术异常、空指针异常、类型转换异常等。<br>3.try…catch…finally使用的标准格式：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionStanfordStyle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//在定义方法时throws异常，我们必须使用try...catch来处理异常，在处理时将异常throw到调用处，让调用处进行处理。</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">div</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"除法计算开始\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tresult = a / b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"除法计算结束\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tExceptionStanfordStyle.div(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.finally不被调用的情况</p>\n<ul>\n<li>使用System.exit();</li>\n<li>其他线程干扰了当前线程（通过interrupt方法）;</li>\n<li>jvm崩溃（crash）;</li>\n</ul>\n","excerpt":"<p>有关异常的几点总结：<br>","more":"<br>1.Throwable是Exception和Error的父类，我们能够处理的只有Exception类，一般不要使用Throwable。<br>2.Exception定义的异常必须被处理，RuntimeException可以选择性地处理。RuntimeException包含有算术异常、空指针异常、类型转换异常等。<br>3.try…catch…finally使用的标准格式：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionStanfordStyle</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//在定义方法时throws异常，我们必须使用try...catch来处理异常，在处理时将异常throw到调用处，让调用处进行处理。</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">div</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"除法计算开始\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tresult = a / b;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"除法计算结束\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tExceptionStanfordStyle.div(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.finally不被调用的情况</p>\n<ul>\n<li>使用System.exit();</li>\n<li>其他线程干扰了当前线程（通过interrupt方法）;</li>\n<li>jvm崩溃（crash）;</li>\n</ul>"},{"title":"alias 命令","date":"2016-10-30T04:26:03.000Z","_content":"### alias命令用来创建命令别名\n我们可以来执行一下`type ls`命令，会在终端中输出`ls`命令的类型`ls`是`ls --color=auto`的别名。在linux中命令的形式有四种：是一个有其它语言编写的可执行的程序，是一个shell内部命令，或者是一个shell函数，或者是一个命令别名。命令别名是建立在其它的命令之上，是几个命令的组合，但是又不同于shell函数。\n使用alias创建命令别名时，要求你所创建的命令别名没有覆盖原先的命令，也就是和原先已经存在的命令不能相同。使用方式：\n`alias cmdname=\"cmds\"`\n这种方式创建的别名是临时的，在终端关闭后就会失去作用。如果我们想要使创建的命令一直有效，我们需要这么做，修改.bashrc文件，在其中添加自己的命令别名：\n`vim ~/.bashrc`\n`alias cmdname=\"cmds\"`\n\n同样的我们也可以删除别名：\n`unalias cmdname`\n要是在.bashrc中的命令我们直接删除或者注释掉就删除OK了。\n如果我们只是输入一个`alias`，那么在终端中就会出现本地环境中创建的各个命令别名。 ","source":"_posts/alias.md","raw":"---\ntitle: alias 命令\ndate: 2016-10-30 12:26:03\ntags: linux\ncategories: 一天一个linux命令\n---\n### alias命令用来创建命令别名\n我们可以来执行一下`type ls`命令，会在终端中输出`ls`命令的类型`ls`是`ls --color=auto`的别名。在linux中命令的形式有四种：是一个有其它语言编写的可执行的程序，是一个shell内部命令，或者是一个shell函数，或者是一个命令别名。命令别名是建立在其它的命令之上，是几个命令的组合，但是又不同于shell函数。\n使用alias创建命令别名时，要求你所创建的命令别名没有覆盖原先的命令，也就是和原先已经存在的命令不能相同。使用方式：\n`alias cmdname=\"cmds\"`\n这种方式创建的别名是临时的，在终端关闭后就会失去作用。如果我们想要使创建的命令一直有效，我们需要这么做，修改.bashrc文件，在其中添加自己的命令别名：\n`vim ~/.bashrc`\n`alias cmdname=\"cmds\"`\n\n同样的我们也可以删除别名：\n`unalias cmdname`\n要是在.bashrc中的命令我们直接删除或者注释掉就删除OK了。\n如果我们只是输入一个`alias`，那么在终端中就会出现本地环境中创建的各个命令别名。 ","slug":"alias","published":1,"updated":"2016-10-30T05:04:24.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz7l0005bakzb6i8tfbn","content":"<h3 id=\"alias命令用来创建命令别名\"><a href=\"#alias命令用来创建命令别名\" class=\"headerlink\" title=\"alias命令用来创建命令别名\"></a>alias命令用来创建命令别名</h3><p>我们可以来执行一下<code>type ls</code>命令，会在终端中输出<code>ls</code>命令的类型<code>ls</code>是<code>ls --color=auto</code>的别名。在linux中命令的形式有四种：是一个有其它语言编写的可执行的程序，是一个shell内部命令，或者是一个shell函数，或者是一个命令别名。命令别名是建立在其它的命令之上，是几个命令的组合，但是又不同于shell函数。<br>使用alias创建命令别名时，要求你所创建的命令别名没有覆盖原先的命令，也就是和原先已经存在的命令不能相同。使用方式：<br><code>alias cmdname=&quot;cmds&quot;</code><br>这种方式创建的别名是临时的，在终端关闭后就会失去作用。如果我们想要使创建的命令一直有效，我们需要这么做，修改.bashrc文件，在其中添加自己的命令别名：<br><code>vim ~/.bashrc</code><br><code>alias cmdname=&quot;cmds&quot;</code></p>\n<p>同样的我们也可以删除别名：<br><code>unalias cmdname</code><br>要是在.bashrc中的命令我们直接删除或者注释掉就删除OK了。<br>如果我们只是输入一个<code>alias</code>，那么在终端中就会出现本地环境中创建的各个命令别名。 </p>\n","excerpt":"","more":"<h3 id=\"alias命令用来创建命令别名\"><a href=\"#alias命令用来创建命令别名\" class=\"headerlink\" title=\"alias命令用来创建命令别名\"></a>alias命令用来创建命令别名</h3><p>我们可以来执行一下<code>type ls</code>命令，会在终端中输出<code>ls</code>命令的类型<code>ls</code>是<code>ls --color=auto</code>的别名。在linux中命令的形式有四种：是一个有其它语言编写的可执行的程序，是一个shell内部命令，或者是一个shell函数，或者是一个命令别名。命令别名是建立在其它的命令之上，是几个命令的组合，但是又不同于shell函数。<br>使用alias创建命令别名时，要求你所创建的命令别名没有覆盖原先的命令，也就是和原先已经存在的命令不能相同。使用方式：<br><code>alias cmdname=&quot;cmds&quot;</code><br>这种方式创建的别名是临时的，在终端关闭后就会失去作用。如果我们想要使创建的命令一直有效，我们需要这么做，修改.bashrc文件，在其中添加自己的命令别名：<br><code>vim ~/.bashrc</code><br><code>alias cmdname=&quot;cmds&quot;</code></p>\n<p>同样的我们也可以删除别名：<br><code>unalias cmdname</code><br>要是在.bashrc中的命令我们直接删除或者注释掉就删除OK了。<br>如果我们只是输入一个<code>alias</code>，那么在终端中就会出现本地环境中创建的各个命令别名。 </p>\n"},{"title":"数组分析","date":"2016-10-11T18:31:37.000Z","_content":"### 学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。\n<!--more-->\n1.数组的初始化方式有两种：静态初始化、动态初始化。不管采用哪种初始化的方式，初始化完成后数组的长度保持不变。数组是一个对象，故访问其长度时有属性length。动态初始化时没有为数组指定元素，则数组会根据定义的类型对其进行默认初始化。\n* byte、short、int、long －－> 0\n* float、double －－> 0.0\n* char －－> '\\u0000'\n* boolean －－> false\n* class、interface、array －－> null\n\n对一个对象实例的初始化也遵循以上原则。\n2.引用类型数组中，每个数组变量储存的是对象的地址。假如我们创建一个Object[]数组，我们可以借此构建一个多维数组，只要将每个Object[index]元素引用另外的Object[]数组...依次循环下去就可以实现多维数组。\n3.数组'[]'之前的结构即为该数组的类型，比如：int[][]的类型就是int[]。\n4.数组的初始化其实是对数组对象的初始化，而不是数组变量的初始化。一个数组变量可以指向类型一致的所有数组对象。扩展之：java程序中的引用变量都不需初始化，需要初始化的是该变量所引用的对象。\n\n其他内容：当通过引用变量来访问一个实例属性，或者访问一个非静态的方法时，如果该引用变量还未指向一个有效的对象，就会出现空指针异常。\n\n\n\n","source":"_posts/arrayAnalysis.md","raw":"---\ntitle: 数组分析\ndate: 2016-10-12 02:31:37\ntags: array\ncategories: JavaSE\n---\n### 学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。\n<!--more-->\n1.数组的初始化方式有两种：静态初始化、动态初始化。不管采用哪种初始化的方式，初始化完成后数组的长度保持不变。数组是一个对象，故访问其长度时有属性length。动态初始化时没有为数组指定元素，则数组会根据定义的类型对其进行默认初始化。\n* byte、short、int、long －－> 0\n* float、double －－> 0.0\n* char －－> '\\u0000'\n* boolean －－> false\n* class、interface、array －－> null\n\n对一个对象实例的初始化也遵循以上原则。\n2.引用类型数组中，每个数组变量储存的是对象的地址。假如我们创建一个Object[]数组，我们可以借此构建一个多维数组，只要将每个Object[index]元素引用另外的Object[]数组...依次循环下去就可以实现多维数组。\n3.数组'[]'之前的结构即为该数组的类型，比如：int[][]的类型就是int[]。\n4.数组的初始化其实是对数组对象的初始化，而不是数组变量的初始化。一个数组变量可以指向类型一致的所有数组对象。扩展之：java程序中的引用变量都不需初始化，需要初始化的是该变量所引用的对象。\n\n其他内容：当通过引用变量来访问一个实例属性，或者访问一个非静态的方法时，如果该引用变量还未指向一个有效的对象，就会出现空指针异常。\n\n\n\n","slug":"arrayAnalysis","published":1,"updated":"2016-10-23T02:38:42.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz7t0006bakzu75zsrtt","content":"<h3 id=\"学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。\"><a href=\"#学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。\" class=\"headerlink\" title=\"学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。\"></a>学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。</h3><a id=\"more\"></a>\n<p>1.数组的初始化方式有两种：静态初始化、动态初始化。不管采用哪种初始化的方式，初始化完成后数组的长度保持不变。数组是一个对象，故访问其长度时有属性length。动态初始化时没有为数组指定元素，则数组会根据定义的类型对其进行默认初始化。</p>\n<ul>\n<li>byte、short、int、long －－&gt; 0</li>\n<li>float、double －－&gt; 0.0</li>\n<li>char －－&gt; ‘\\u0000’</li>\n<li>boolean －－&gt; false</li>\n<li>class、interface、array －－&gt; null</li>\n</ul>\n<p>对一个对象实例的初始化也遵循以上原则。<br>2.引用类型数组中，每个数组变量储存的是对象的地址。假如我们创建一个Object[]数组，我们可以借此构建一个多维数组，只要将每个Object[index]元素引用另外的Object[]数组…依次循环下去就可以实现多维数组。<br>3.数组’[]’之前的结构即为该数组的类型，比如：int[][]的类型就是int[]。<br>4.数组的初始化其实是对数组对象的初始化，而不是数组变量的初始化。一个数组变量可以指向类型一致的所有数组对象。扩展之：java程序中的引用变量都不需初始化，需要初始化的是该变量所引用的对象。</p>\n<p>其他内容：当通过引用变量来访问一个实例属性，或者访问一个非静态的方法时，如果该引用变量还未指向一个有效的对象，就会出现空指针异常。</p>\n","excerpt":"<h3 id=\"学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。\"><a href=\"#学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。\" class=\"headerlink\" title=\"学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。\"></a>学习了一段时间的数组，下面结合书本内容对其做一个较为深入的总结。</h3>","more":"<p>1.数组的初始化方式有两种：静态初始化、动态初始化。不管采用哪种初始化的方式，初始化完成后数组的长度保持不变。数组是一个对象，故访问其长度时有属性length。动态初始化时没有为数组指定元素，则数组会根据定义的类型对其进行默认初始化。</p>\n<ul>\n<li>byte、short、int、long －－&gt; 0</li>\n<li>float、double －－&gt; 0.0</li>\n<li>char －－&gt; ‘\\u0000’</li>\n<li>boolean －－&gt; false</li>\n<li>class、interface、array －－&gt; null</li>\n</ul>\n<p>对一个对象实例的初始化也遵循以上原则。<br>2.引用类型数组中，每个数组变量储存的是对象的地址。假如我们创建一个Object[]数组，我们可以借此构建一个多维数组，只要将每个Object[index]元素引用另外的Object[]数组…依次循环下去就可以实现多维数组。<br>3.数组’[]’之前的结构即为该数组的类型，比如：int[][]的类型就是int[]。<br>4.数组的初始化其实是对数组对象的初始化，而不是数组变量的初始化。一个数组变量可以指向类型一致的所有数组对象。扩展之：java程序中的引用变量都不需初始化，需要初始化的是该变量所引用的对象。</p>\n<p>其他内容：当通过引用变量来访问一个实例属性，或者访问一个非静态的方法时，如果该引用变量还未指向一个有效的对象，就会出现空指针异常。</p>"},{"title":"黑白重庆","date":"2016-11-23T04:18:40.000Z","_content":"在重庆的日子无多，留下几次黑白的照片，也不怕记忆会褪色。\n<!--more-->\n![图书馆](http://oeio7i5qf.bkt.clouddn.com/IMG_20161019_104302-01.jpeg)\n![楼角](http://oeio7i5qf.bkt.clouddn.com/IMG_20161018_182805-01.jpeg)\n![街](http://oeio7i5qf.bkt.clouddn.com/IMG_20161018_181905-01.jpeg)","source":"_posts/bwcq.md","raw":"---\ntitle: 黑白重庆\ndate: 2016-11-23 12:18:40\ntags: 重庆\ncategories: 在哪\n---\n在重庆的日子无多，留下几次黑白的照片，也不怕记忆会褪色。\n<!--more-->\n![图书馆](http://oeio7i5qf.bkt.clouddn.com/IMG_20161019_104302-01.jpeg)\n![楼角](http://oeio7i5qf.bkt.clouddn.com/IMG_20161018_182805-01.jpeg)\n![街](http://oeio7i5qf.bkt.clouddn.com/IMG_20161018_181905-01.jpeg)","slug":"bwcq","published":1,"updated":"2016-11-23T04:26:34.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz7v0007bakzfnpf02re","content":"<p>在重庆的日子无多，留下几次黑白的照片，也不怕记忆会褪色。<br><a id=\"more\"></a><br><img src=\"http://oeio7i5qf.bkt.clouddn.com/IMG_20161019_104302-01.jpeg\" alt=\"图书馆\"><br><img src=\"http://oeio7i5qf.bkt.clouddn.com/IMG_20161018_182805-01.jpeg\" alt=\"楼角\"><br><img src=\"http://oeio7i5qf.bkt.clouddn.com/IMG_20161018_181905-01.jpeg\" alt=\"街\"></p>\n","excerpt":"<p>在重庆的日子无多，留下几次黑白的照片，也不怕记忆会褪色。<br>","more":"<br><img src=\"http://oeio7i5qf.bkt.clouddn.com/IMG_20161019_104302-01.jpeg\" alt=\"图书馆\"><br><img src=\"http://oeio7i5qf.bkt.clouddn.com/IMG_20161018_182805-01.jpeg\" alt=\"楼角\"><br><img src=\"http://oeio7i5qf.bkt.clouddn.com/IMG_20161018_181905-01.jpeg\" alt=\"街\"></p>"},{"title":"配置java环境变量","date":"2016-10-06T04:51:22.000Z","_content":"## Linux下的java环境变量的配置\n在windows下操作，由于有图形化界面的帮助，环境变量的配置很人性化，尤其是在win10以后，环境变量的配置甚至都不需要在原来的特别长的path变量中添加“;“，简单几步即可完成。当我第一次使用ubuntu时，想在其中安装个java，配置环境变量都无从下手，linux下学习安装软件是一个比较复杂的过程，有很多依赖关系需要搞明白，但是当学习一段时间之后，发现在命令行下的操作也是相当方便的。\n<!--more-->\n**linux下java环境变量的配置**\n1.去oracle官网上下载相应的jdk的包，Ubuntu下对应的下载.tar.gz的包，将其解压，解压可以直接使用Ubuntu的图形化界面工具进行操作也可以使用命令行，然后将其移动到指定的文件夹下。\n`sudo mkdir /usr/local/java`\n`sudo tar -zxvf yourJDKDirName -C /usr/local/java/`\n2.配置环境变量\n`sudo vim ~/.bashrc`\n`export JAVA_HOME=/usr/local/java/jdk-...`\n`export JRE_HOME=${JAVA_HOME}/jre`\n`export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib`\n`export PATH=${JAVA_HOME}/bin:$PATH`\n这里在配置时也可以使用其它文本编辑器，也可以学习一些vim的简单操作。\n3.`source /etc/profile`\n4.测试\n在终端输入：`java` `javac`\n\n至此环境变量就配置好了。\n","source":"_posts/configJavaEnvVar.md","raw":"---\ntitle: 配置java环境变量\ndate: 2016-10-06 12:51:22\ntags: java环境变量\ncategories: linux\n---\n## Linux下的java环境变量的配置\n在windows下操作，由于有图形化界面的帮助，环境变量的配置很人性化，尤其是在win10以后，环境变量的配置甚至都不需要在原来的特别长的path变量中添加“;“，简单几步即可完成。当我第一次使用ubuntu时，想在其中安装个java，配置环境变量都无从下手，linux下学习安装软件是一个比较复杂的过程，有很多依赖关系需要搞明白，但是当学习一段时间之后，发现在命令行下的操作也是相当方便的。\n<!--more-->\n**linux下java环境变量的配置**\n1.去oracle官网上下载相应的jdk的包，Ubuntu下对应的下载.tar.gz的包，将其解压，解压可以直接使用Ubuntu的图形化界面工具进行操作也可以使用命令行，然后将其移动到指定的文件夹下。\n`sudo mkdir /usr/local/java`\n`sudo tar -zxvf yourJDKDirName -C /usr/local/java/`\n2.配置环境变量\n`sudo vim ~/.bashrc`\n`export JAVA_HOME=/usr/local/java/jdk-...`\n`export JRE_HOME=${JAVA_HOME}/jre`\n`export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib`\n`export PATH=${JAVA_HOME}/bin:$PATH`\n这里在配置时也可以使用其它文本编辑器，也可以学习一些vim的简单操作。\n3.`source /etc/profile`\n4.测试\n在终端输入：`java` `javac`\n\n至此环境变量就配置好了。\n","slug":"configJavaEnvVar","published":1,"updated":"2016-10-23T02:38:42.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz7z000bbakz5pb8pabs","content":"<h2 id=\"Linux下的java环境变量的配置\"><a href=\"#Linux下的java环境变量的配置\" class=\"headerlink\" title=\"Linux下的java环境变量的配置\"></a>Linux下的java环境变量的配置</h2><p>在windows下操作，由于有图形化界面的帮助，环境变量的配置很人性化，尤其是在win10以后，环境变量的配置甚至都不需要在原来的特别长的path变量中添加“;“，简单几步即可完成。当我第一次使用ubuntu时，想在其中安装个java，配置环境变量都无从下手，linux下学习安装软件是一个比较复杂的过程，有很多依赖关系需要搞明白，但是当学习一段时间之后，发现在命令行下的操作也是相当方便的。<br><a id=\"more\"></a><br><strong>linux下java环境变量的配置</strong><br>1.去oracle官网上下载相应的jdk的包，Ubuntu下对应的下载.tar.gz的包，将其解压，解压可以直接使用Ubuntu的图形化界面工具进行操作也可以使用命令行，然后将其移动到指定的文件夹下。<br><code>sudo mkdir /usr/local/java</code><br><code>sudo tar -zxvf yourJDKDirName -C /usr/local/java/</code><br>2.配置环境变量<br><code>sudo vim ~/.bashrc</code><br><code>export JAVA_HOME=/usr/local/java/jdk-...</code><br><code>export JRE_HOME=${JAVA_HOME}/jre</code><br><code>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib</code><br><code>export PATH=${JAVA_HOME}/bin:$PATH</code><br>这里在配置时也可以使用其它文本编辑器，也可以学习一些vim的简单操作。<br>3.<code>source /etc/profile</code><br>4.测试<br>在终端输入：<code>java</code> <code>javac</code></p>\n<p>至此环境变量就配置好了。</p>\n","excerpt":"<h2 id=\"Linux下的java环境变量的配置\"><a href=\"#Linux下的java环境变量的配置\" class=\"headerlink\" title=\"Linux下的java环境变量的配置\"></a>Linux下的java环境变量的配置</h2><p>在windows下操作，由于有图形化界面的帮助，环境变量的配置很人性化，尤其是在win10以后，环境变量的配置甚至都不需要在原来的特别长的path变量中添加“;“，简单几步即可完成。当我第一次使用ubuntu时，想在其中安装个java，配置环境变量都无从下手，linux下学习安装软件是一个比较复杂的过程，有很多依赖关系需要搞明白，但是当学习一段时间之后，发现在命令行下的操作也是相当方便的。<br>","more":"<br><strong>linux下java环境变量的配置</strong><br>1.去oracle官网上下载相应的jdk的包，Ubuntu下对应的下载.tar.gz的包，将其解压，解压可以直接使用Ubuntu的图形化界面工具进行操作也可以使用命令行，然后将其移动到指定的文件夹下。<br><code>sudo mkdir /usr/local/java</code><br><code>sudo tar -zxvf yourJDKDirName -C /usr/local/java/</code><br>2.配置环境变量<br><code>sudo vim ~/.bashrc</code><br><code>export JAVA_HOME=/usr/local/java/jdk-...</code><br><code>export JRE_HOME=${JAVA_HOME}/jre</code><br><code>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib</code><br><code>export PATH=${JAVA_HOME}/bin:$PATH</code><br>这里在配置时也可以使用其它文本编辑器，也可以学习一些vim的简单操作。<br>3.<code>source /etc/profile</code><br>4.测试<br>在终端输入：<code>java</code> <code>javac</code></p>\n<p>至此环境变量就配置好了。</p>"},{"title":"File类和IO流相关常用api的练习","date":"2016-10-27T10:22:07.000Z","_content":"## 利用File类和IO相关的api实现了一些基本的系统功能\n** show my codes **：\n<!--more-->\n```java\npackage io.ondelete.file;\n\nimport java.io.*;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * Created by southwe\n * 以下是对File类和IO流的基本api的一些小练习\n */\npublic class FileUtils {\n\n    public static void newFile(String path) {\n        File file = new File(path);\n        if (!file.exists()) {\n            try {\n                System.out.println(\"file created! \" + file.createNewFile());\n                System.out.println(\"file can read. \" + file.canRead());\n                System.out.println(\"file can write. \" + file.canWrite());\n                System.out.println(\"file can excute. \" + file.canExecute());\n                System.out.println(\"file length:\" + file.length());\n                System.out.println(file);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"file deleted! \" + file.delete());\n            file.deleteOnExit();\n        }\n        System.out.println(\"separator-->\" + File.separator);//文件分割符：windows下是\"\\\",unix下是\"/\"\n        System.out.println(\"separatorChar-->\" + File.separatorChar);\n        System.out.println(\"pathSeparator-->\" + File.pathSeparator);//路径分割符：windows下是\";\",unix下是\":\"(在环境变量PTAH配置时可见)\n        System.out.println(\"pathSeparatorChar-->\" + File.pathSeparatorChar);\n    }\n\n\n    /**\n     * 列出指定的文件或文件夹路径 unix风格\n     *\n     * @param path 指定要列出的文件或文件夹路径\n     */\n    public static void ls(String path) {\n        File file = new File(path);\n        if (!file.exists()) {\n            System.out.println(\"dir make! \" + file.mkdirs());\n        } else {\n            File[] files = file.listFiles();\n            for (File f : files\n                    ) {\n                String isdir = f.isDirectory() ? \"d\" : \"-\";\n                String canread = f.canRead() ? \"r\" : \"-\";\n                String canwrite = f.canWrite() ? \"w\" : \"-\";\n                String canexcute = f.canExecute() ? \"x\" : \"-\";\n                long time = f.lastModified();\n                Date date = new Date(time);\n                DateFormat format = new SimpleDateFormat(\"MM月 dd HH:mm\");\n                String formattime = format.format(date);\n                System.out.println(isdir + canread + canwrite + canexcute + \" \"\n                        + f.length() + \" \" + formattime + \" \" + f.getName());\n            }\n        }\n    }\n\n    /**\n     * 实现文件的拷贝\n     *\n     * @param src  原文件路径\n     * @param dest 目标文件路径\n     * @throws IOException\n     */\n    public static void cpFile(File src, File dest) throws IOException {\n        if (!dest.exists()) {\n            try {\n                dest.createNewFile();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(src);\n            os = new FileOutputStream(dest, true);//后面的true表示追加操作，默认为false，在写入时覆盖原有的数据。\n            byte[] flush = new byte[1024];\n            int len = 0;\n            while (-1 != (len = is.read(flush))) {\n                //\n                //is.read(flush,0,len)\n                os.write(flush, 0, len);\n            }\n            os.flush();\n        } catch (IOException e) {\n            throw e;\n        } catch (FileNotFoundException e) {\n            throw e;\n        } finally {\n            if (null != is && null != os) {\n                try {\n                    os.close();\n                    is.close();\n                } catch (IOException e) {\n                    throw e;\n                }\n            }\n        }\n    }\n\n    /**\n     * 实现对一个文件夹的拷贝\n     *\n     * @param src  原文件或者文件夹对象\n     * @param dest 目标文件或者文件夹对象\n     */\n    public static void cpdir(File src, File dest) {\n        //判断src对象是否是一个文件，如果为一个文件，则直接创建\n        if (src.isFile()) {\n            try {\n                cpFile(src, dest);\n            } catch (IOException e) {\n                e.printStackTrace();\n            } catch (FileNotFoundException e) {\n            throw e;\n            }\n        } else if (src.isDirectory()) {\n            //如果为一个目录，首先创建dest文件夹\n            if (!dest.exists()) {\n                dest.mkdir();\n            }\n            //然后遍历src文件夹，查看其子内容时文件夹还是文件，递归调用本方法，达到拷贝文件夹的目的\n            for (File sub :\n                    src.listFiles()) {\n                cpdir(sub, new File(dest, sub.getName()));\n            }\n        }\n    }\n\n    /**\n     * @param srcpath  原文件或者文件夹路径\n     * @param destpath 目标文件或者文件夹路径\n     */\n    public static void cpdir(String srcpath, String destpath) {\n        cpdir(new File(srcpath), new File(destpath));\n    }\n```","source":"_posts/file.md","raw":"---\ntitle: File类和IO流相关常用api的练习\ndate: 2016-10-27 18:22:07\ntags: [IO,File]\ncategories: JavaSE\n---\n## 利用File类和IO相关的api实现了一些基本的系统功能\n** show my codes **：\n<!--more-->\n```java\npackage io.ondelete.file;\n\nimport java.io.*;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * Created by southwe\n * 以下是对File类和IO流的基本api的一些小练习\n */\npublic class FileUtils {\n\n    public static void newFile(String path) {\n        File file = new File(path);\n        if (!file.exists()) {\n            try {\n                System.out.println(\"file created! \" + file.createNewFile());\n                System.out.println(\"file can read. \" + file.canRead());\n                System.out.println(\"file can write. \" + file.canWrite());\n                System.out.println(\"file can excute. \" + file.canExecute());\n                System.out.println(\"file length:\" + file.length());\n                System.out.println(file);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"file deleted! \" + file.delete());\n            file.deleteOnExit();\n        }\n        System.out.println(\"separator-->\" + File.separator);//文件分割符：windows下是\"\\\",unix下是\"/\"\n        System.out.println(\"separatorChar-->\" + File.separatorChar);\n        System.out.println(\"pathSeparator-->\" + File.pathSeparator);//路径分割符：windows下是\";\",unix下是\":\"(在环境变量PTAH配置时可见)\n        System.out.println(\"pathSeparatorChar-->\" + File.pathSeparatorChar);\n    }\n\n\n    /**\n     * 列出指定的文件或文件夹路径 unix风格\n     *\n     * @param path 指定要列出的文件或文件夹路径\n     */\n    public static void ls(String path) {\n        File file = new File(path);\n        if (!file.exists()) {\n            System.out.println(\"dir make! \" + file.mkdirs());\n        } else {\n            File[] files = file.listFiles();\n            for (File f : files\n                    ) {\n                String isdir = f.isDirectory() ? \"d\" : \"-\";\n                String canread = f.canRead() ? \"r\" : \"-\";\n                String canwrite = f.canWrite() ? \"w\" : \"-\";\n                String canexcute = f.canExecute() ? \"x\" : \"-\";\n                long time = f.lastModified();\n                Date date = new Date(time);\n                DateFormat format = new SimpleDateFormat(\"MM月 dd HH:mm\");\n                String formattime = format.format(date);\n                System.out.println(isdir + canread + canwrite + canexcute + \" \"\n                        + f.length() + \" \" + formattime + \" \" + f.getName());\n            }\n        }\n    }\n\n    /**\n     * 实现文件的拷贝\n     *\n     * @param src  原文件路径\n     * @param dest 目标文件路径\n     * @throws IOException\n     */\n    public static void cpFile(File src, File dest) throws IOException {\n        if (!dest.exists()) {\n            try {\n                dest.createNewFile();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(src);\n            os = new FileOutputStream(dest, true);//后面的true表示追加操作，默认为false，在写入时覆盖原有的数据。\n            byte[] flush = new byte[1024];\n            int len = 0;\n            while (-1 != (len = is.read(flush))) {\n                //\n                //is.read(flush,0,len)\n                os.write(flush, 0, len);\n            }\n            os.flush();\n        } catch (IOException e) {\n            throw e;\n        } catch (FileNotFoundException e) {\n            throw e;\n        } finally {\n            if (null != is && null != os) {\n                try {\n                    os.close();\n                    is.close();\n                } catch (IOException e) {\n                    throw e;\n                }\n            }\n        }\n    }\n\n    /**\n     * 实现对一个文件夹的拷贝\n     *\n     * @param src  原文件或者文件夹对象\n     * @param dest 目标文件或者文件夹对象\n     */\n    public static void cpdir(File src, File dest) {\n        //判断src对象是否是一个文件，如果为一个文件，则直接创建\n        if (src.isFile()) {\n            try {\n                cpFile(src, dest);\n            } catch (IOException e) {\n                e.printStackTrace();\n            } catch (FileNotFoundException e) {\n            throw e;\n            }\n        } else if (src.isDirectory()) {\n            //如果为一个目录，首先创建dest文件夹\n            if (!dest.exists()) {\n                dest.mkdir();\n            }\n            //然后遍历src文件夹，查看其子内容时文件夹还是文件，递归调用本方法，达到拷贝文件夹的目的\n            for (File sub :\n                    src.listFiles()) {\n                cpdir(sub, new File(dest, sub.getName()));\n            }\n        }\n    }\n\n    /**\n     * @param srcpath  原文件或者文件夹路径\n     * @param destpath 目标文件或者文件夹路径\n     */\n    public static void cpdir(String srcpath, String destpath) {\n        cpdir(new File(srcpath), new File(destpath));\n    }\n```","slug":"file","published":1,"updated":"2016-10-28T13:10:30.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz89000dbakzo050r6hx","content":"<h2 id=\"利用File类和IO相关的api实现了一些基本的系统功能\"><a href=\"#利用File类和IO相关的api实现了一些基本的系统功能\" class=\"headerlink\" title=\"利用File类和IO相关的api实现了一些基本的系统功能\"></a>利用File类和IO相关的api实现了一些基本的系统功能</h2><p><strong> show my codes </strong>：<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> io.ondelete.file;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.text.DateFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by southwe</div><div class=\"line\"> * 以下是对File类和IO流的基本api的一些小练习</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUtils</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">newFile</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(path);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file created! \"</span> + file.createNewFile());</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file can read. \"</span> + file.canRead());</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file can write. \"</span> + file.canWrite());</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file can excute. \"</span> + file.canExecute());</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file length:\"</span> + file.length());</div><div class=\"line\">                System.out.println(file);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"file deleted! \"</span> + file.delete());</div><div class=\"line\">            file.deleteOnExit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"separator--&gt;\"</span> + File.separator);<span class=\"comment\">//文件分割符：windows下是\"\\\",unix下是\"/\"</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"separatorChar--&gt;\"</span> + File.separatorChar);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"pathSeparator--&gt;\"</span> + File.pathSeparator);<span class=\"comment\">//路径分割符：windows下是\";\",unix下是\":\"(在环境变量PTAH配置时可见)</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"pathSeparatorChar--&gt;\"</span> + File.pathSeparatorChar);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 列出指定的文件或文件夹路径 unix风格</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> path 指定要列出的文件或文件夹路径</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ls</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(path);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"dir make! \"</span> + file.mkdirs());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            File[] files = file.listFiles();</div><div class=\"line\">            <span class=\"keyword\">for</span> (File f : files</div><div class=\"line\">                    ) &#123;</div><div class=\"line\">                String isdir = f.isDirectory() ? <span class=\"string\">\"d\"</span> : <span class=\"string\">\"-\"</span>;</div><div class=\"line\">                String canread = f.canRead() ? <span class=\"string\">\"r\"</span> : <span class=\"string\">\"-\"</span>;</div><div class=\"line\">                String canwrite = f.canWrite() ? <span class=\"string\">\"w\"</span> : <span class=\"string\">\"-\"</span>;</div><div class=\"line\">                String canexcute = f.canExecute() ? <span class=\"string\">\"x\"</span> : <span class=\"string\">\"-\"</span>;</div><div class=\"line\">                <span class=\"keyword\">long</span> time = f.lastModified();</div><div class=\"line\">                Date date = <span class=\"keyword\">new</span> Date(time);</div><div class=\"line\">                DateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"MM月 dd HH:mm\"</span>);</div><div class=\"line\">                String formattime = format.format(date);</div><div class=\"line\">                System.out.println(isdir + canread + canwrite + canexcute + <span class=\"string\">\" \"</span></div><div class=\"line\">                        + f.length() + <span class=\"string\">\" \"</span> + formattime + <span class=\"string\">\" \"</span> + f.getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 实现文件的拷贝</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> src  原文件路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> dest 目标文件路径</div><div class=\"line\">     * <span class=\"doctag\">@throws</span> IOException</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cpFile</span><span class=\"params\">(File src, File dest)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dest.exists()) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                dest.createNewFile();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</div><div class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            is = <span class=\"keyword\">new</span> FileInputStream(src);</div><div class=\"line\">            os = <span class=\"keyword\">new</span> FileOutputStream(dest, <span class=\"keyword\">true</span>);<span class=\"comment\">//后面的true表示追加操作，默认为false，在写入时覆盖原有的数据。</span></div><div class=\"line\">            <span class=\"keyword\">byte</span>[] flush = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">            <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (-<span class=\"number\">1</span> != (len = is.read(flush))) &#123;</div><div class=\"line\">                <span class=\"comment\">//</span></div><div class=\"line\">                <span class=\"comment\">//is.read(flush,0,len)</span></div><div class=\"line\">                os.write(flush, <span class=\"number\">0</span>, len);</div><div class=\"line\">            &#125;</div><div class=\"line\">            os.flush();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != is &amp;&amp; <span class=\"keyword\">null</span> != os) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    os.close();</div><div class=\"line\">                    is.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> e;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 实现对一个文件夹的拷贝</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> src  原文件或者文件夹对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> dest 目标文件或者文件夹对象</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cpdir</span><span class=\"params\">(File src, File dest)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//判断src对象是否是一个文件，如果为一个文件，则直接创建</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (src.isFile()) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                cpFile(src, dest);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (src.isDirectory()) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果为一个目录，首先创建dest文件夹</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!dest.exists()) &#123;</div><div class=\"line\">                dest.mkdir();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//然后遍历src文件夹，查看其子内容时文件夹还是文件，递归调用本方法，达到拷贝文件夹的目的</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (File sub :</div><div class=\"line\">                    src.listFiles()) &#123;</div><div class=\"line\">                cpdir(sub, <span class=\"keyword\">new</span> File(dest, sub.getName()));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@param</span> srcpath  原文件或者文件夹路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> destpath 目标文件或者文件夹路径</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cpdir</span><span class=\"params\">(String srcpath, String destpath)</span> </span>&#123;</div><div class=\"line\">        cpdir(<span class=\"keyword\">new</span> File(srcpath), <span class=\"keyword\">new</span> File(destpath));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"利用File类和IO相关的api实现了一些基本的系统功能\"><a href=\"#利用File类和IO相关的api实现了一些基本的系统功能\" class=\"headerlink\" title=\"利用File类和IO相关的api实现了一些基本的系统功能\"></a>利用File类和IO相关的api实现了一些基本的系统功能</h2><p><strong> show my codes </strong>：<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> io.ondelete.file;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.text.DateFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Created by southwe</div><div class=\"line\"> * 以下是对File类和IO流的基本api的一些小练习</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUtils</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">newFile</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(path);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file created! \"</span> + file.createNewFile());</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file can read. \"</span> + file.canRead());</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file can write. \"</span> + file.canWrite());</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file can excute. \"</span> + file.canExecute());</div><div class=\"line\">                System.out.println(<span class=\"string\">\"file length:\"</span> + file.length());</div><div class=\"line\">                System.out.println(file);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"file deleted! \"</span> + file.delete());</div><div class=\"line\">            file.deleteOnExit();</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"separator--&gt;\"</span> + File.separator);<span class=\"comment\">//文件分割符：windows下是\"\\\",unix下是\"/\"</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"separatorChar--&gt;\"</span> + File.separatorChar);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"pathSeparator--&gt;\"</span> + File.pathSeparator);<span class=\"comment\">//路径分割符：windows下是\";\",unix下是\":\"(在环境变量PTAH配置时可见)</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"pathSeparatorChar--&gt;\"</span> + File.pathSeparatorChar);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 列出指定的文件或文件夹路径 unix风格</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> path 指定要列出的文件或文件夹路径</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ls</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(path);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"dir make! \"</span> + file.mkdirs());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            File[] files = file.listFiles();</div><div class=\"line\">            <span class=\"keyword\">for</span> (File f : files</div><div class=\"line\">                    ) &#123;</div><div class=\"line\">                String isdir = f.isDirectory() ? <span class=\"string\">\"d\"</span> : <span class=\"string\">\"-\"</span>;</div><div class=\"line\">                String canread = f.canRead() ? <span class=\"string\">\"r\"</span> : <span class=\"string\">\"-\"</span>;</div><div class=\"line\">                String canwrite = f.canWrite() ? <span class=\"string\">\"w\"</span> : <span class=\"string\">\"-\"</span>;</div><div class=\"line\">                String canexcute = f.canExecute() ? <span class=\"string\">\"x\"</span> : <span class=\"string\">\"-\"</span>;</div><div class=\"line\">                <span class=\"keyword\">long</span> time = f.lastModified();</div><div class=\"line\">                Date date = <span class=\"keyword\">new</span> Date(time);</div><div class=\"line\">                DateFormat format = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"MM月 dd HH:mm\"</span>);</div><div class=\"line\">                String formattime = format.format(date);</div><div class=\"line\">                System.out.println(isdir + canread + canwrite + canexcute + <span class=\"string\">\" \"</span></div><div class=\"line\">                        + f.length() + <span class=\"string\">\" \"</span> + formattime + <span class=\"string\">\" \"</span> + f.getName());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 实现文件的拷贝</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> src  原文件路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> dest 目标文件路径</div><div class=\"line\">     * <span class=\"doctag\">@throws</span> IOException</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cpFile</span><span class=\"params\">(File src, File dest)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dest.exists()) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                dest.createNewFile();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</div><div class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            is = <span class=\"keyword\">new</span> FileInputStream(src);</div><div class=\"line\">            os = <span class=\"keyword\">new</span> FileOutputStream(dest, <span class=\"keyword\">true</span>);<span class=\"comment\">//后面的true表示追加操作，默认为false，在写入时覆盖原有的数据。</span></div><div class=\"line\">            <span class=\"keyword\">byte</span>[] flush = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">            <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (-<span class=\"number\">1</span> != (len = is.read(flush))) &#123;</div><div class=\"line\">                <span class=\"comment\">//</span></div><div class=\"line\">                <span class=\"comment\">//is.read(flush,0,len)</span></div><div class=\"line\">                os.write(flush, <span class=\"number\">0</span>, len);</div><div class=\"line\">            &#125;</div><div class=\"line\">            os.flush();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != is &amp;&amp; <span class=\"keyword\">null</span> != os) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    os.close();</div><div class=\"line\">                    is.close();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> e;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 实现对一个文件夹的拷贝</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> src  原文件或者文件夹对象</div><div class=\"line\">     * <span class=\"doctag\">@param</span> dest 目标文件或者文件夹对象</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cpdir</span><span class=\"params\">(File src, File dest)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//判断src对象是否是一个文件，如果为一个文件，则直接创建</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (src.isFile()) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                cpFile(src, dest);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> e;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (src.isDirectory()) &#123;</div><div class=\"line\">            <span class=\"comment\">//如果为一个目录，首先创建dest文件夹</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!dest.exists()) &#123;</div><div class=\"line\">                dest.mkdir();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//然后遍历src文件夹，查看其子内容时文件夹还是文件，递归调用本方法，达到拷贝文件夹的目的</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (File sub :</div><div class=\"line\">                    src.listFiles()) &#123;</div><div class=\"line\">                cpdir(sub, <span class=\"keyword\">new</span> File(dest, sub.getName()));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * <span class=\"doctag\">@param</span> srcpath  原文件或者文件夹路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> destpath 目标文件或者文件夹路径</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cpdir</span><span class=\"params\">(String srcpath, String destpath)</span> </span>&#123;</div><div class=\"line\">        cpdir(<span class=\"keyword\">new</span> File(srcpath), <span class=\"keyword\">new</span> File(destpath));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>"},{"title":"泛型的使用","date":"2016-10-24T15:18:03.000Z","_content":"1.在java1.5之后引入了泛型，泛型的使用对于增强了程序的安全和易用性。泛型使用一对“<>”来标记，泛型可以用来修饰类、接口、方法。在自定义泛型的时候，我们可以在尖括号中使用相应的字母和数字的组合来表示泛型，其中字母一般使用大写形式。<!--more-->声明泛型类和接口时将标签符放在类名后面，声明方法时放在返回值前面。以下是常用的字母：\n`T type`\n`E element`\n`K key`\n`V value`\n泛型不能使用在被static修饰的变量上，可以修饰抽象的方法，但是不能使用基本类型指定泛型。\n\n2.在实例化泛型类时，如果没有指定具体的类型，那么会将该实例化的对象类似于Object，但是不完全相等，该实例化的对象不会在编译时检查类型，而被指定为Object的泛型实例化对象会检查类型是否有错。\n\n3.在继承泛型时，如果子类保留父类中的泛型，子类亦为泛型，当子类没有保留父类中的泛型时，则子类按需实现。如果子类没有指定任何类型则泛型被擦出，类似于Object。当子类重写父类中的方法或者使用父类中的对象时，方法或者属性的类型随父类而定，反之，子类新增的方法和属性有子类自己指定。\n\n4.在使用泛型时并没有多态，也就是不能使用泛型父类声明泛型子类的对象；也不存在泛型数组。\n\n5.“？”代表通配符，用来声明变量或者形参，不能做它用。\n```java\npublic static void test(List<?> list){}\nList<?> list =new ArrayList<Integer>();\n```\n另外还有两个用于限制泛型范围的关键字\"extends\"和\"super\"，\"extends\"用来指定上线，\"super\"用来指定下限。\n\n6.在使用泛型嵌套的时候，需要由外到内逐层获取，在遍历map的时候经常会用到（entrySet）。","source":"_posts/generic.md","raw":"---\ntitle: 泛型的使用\ndate: 2016-10-24 23:18:03\ntags: 泛型\ncategories: JavaSE\n---\n1.在java1.5之后引入了泛型，泛型的使用对于增强了程序的安全和易用性。泛型使用一对“<>”来标记，泛型可以用来修饰类、接口、方法。在自定义泛型的时候，我们可以在尖括号中使用相应的字母和数字的组合来表示泛型，其中字母一般使用大写形式。<!--more-->声明泛型类和接口时将标签符放在类名后面，声明方法时放在返回值前面。以下是常用的字母：\n`T type`\n`E element`\n`K key`\n`V value`\n泛型不能使用在被static修饰的变量上，可以修饰抽象的方法，但是不能使用基本类型指定泛型。\n\n2.在实例化泛型类时，如果没有指定具体的类型，那么会将该实例化的对象类似于Object，但是不完全相等，该实例化的对象不会在编译时检查类型，而被指定为Object的泛型实例化对象会检查类型是否有错。\n\n3.在继承泛型时，如果子类保留父类中的泛型，子类亦为泛型，当子类没有保留父类中的泛型时，则子类按需实现。如果子类没有指定任何类型则泛型被擦出，类似于Object。当子类重写父类中的方法或者使用父类中的对象时，方法或者属性的类型随父类而定，反之，子类新增的方法和属性有子类自己指定。\n\n4.在使用泛型时并没有多态，也就是不能使用泛型父类声明泛型子类的对象；也不存在泛型数组。\n\n5.“？”代表通配符，用来声明变量或者形参，不能做它用。\n```java\npublic static void test(List<?> list){}\nList<?> list =new ArrayList<Integer>();\n```\n另外还有两个用于限制泛型范围的关键字\"extends\"和\"super\"，\"extends\"用来指定上线，\"super\"用来指定下限。\n\n6.在使用泛型嵌套的时候，需要由外到内逐层获取，在遍历map的时候经常会用到（entrySet）。","slug":"generic","published":1,"updated":"2016-10-27T11:58:43.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz8e000gbakzpangk3w8","content":"<p>1.在java1.5之后引入了泛型，泛型的使用对于增强了程序的安全和易用性。泛型使用一对“&lt;&gt;”来标记，泛型可以用来修饰类、接口、方法。在自定义泛型的时候，我们可以在尖括号中使用相应的字母和数字的组合来表示泛型，其中字母一般使用大写形式。<a id=\"more\"></a>声明泛型类和接口时将标签符放在类名后面，声明方法时放在返回值前面。以下是常用的字母：<br><code>T type</code><br><code>E element</code><br><code>K key</code><br><code>V value</code><br>泛型不能使用在被static修饰的变量上，可以修饰抽象的方法，但是不能使用基本类型指定泛型。</p>\n<p>2.在实例化泛型类时，如果没有指定具体的类型，那么会将该实例化的对象类似于Object，但是不完全相等，该实例化的对象不会在编译时检查类型，而被指定为Object的泛型实例化对象会检查类型是否有错。</p>\n<p>3.在继承泛型时，如果子类保留父类中的泛型，子类亦为泛型，当子类没有保留父类中的泛型时，则子类按需实现。如果子类没有指定任何类型则泛型被擦出，类似于Object。当子类重写父类中的方法或者使用父类中的对象时，方法或者属性的类型随父类而定，反之，子类新增的方法和属性有子类自己指定。</p>\n<p>4.在使用泛型时并没有多态，也就是不能使用泛型父类声明泛型子类的对象；也不存在泛型数组。</p>\n<p>5.“？”代表通配符，用来声明变量或者形参，不能做它用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(List&lt;?&gt; list)</span></span>&#123;&#125;</div><div class=\"line\">List&lt;?&gt; list =<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div></pre></td></tr></table></figure></p>\n<p>另外还有两个用于限制泛型范围的关键字”extends”和”super”，”extends”用来指定上线，”super”用来指定下限。</p>\n<p>6.在使用泛型嵌套的时候，需要由外到内逐层获取，在遍历map的时候经常会用到（entrySet）。</p>\n","excerpt":"<p>1.在java1.5之后引入了泛型，泛型的使用对于增强了程序的安全和易用性。泛型使用一对“&lt;&gt;”来标记，泛型可以用来修饰类、接口、方法。在自定义泛型的时候，我们可以在尖括号中使用相应的字母和数字的组合来表示泛型，其中字母一般使用大写形式。","more":"声明泛型类和接口时将标签符放在类名后面，声明方法时放在返回值前面。以下是常用的字母：<br><code>T type</code><br><code>E element</code><br><code>K key</code><br><code>V value</code><br>泛型不能使用在被static修饰的变量上，可以修饰抽象的方法，但是不能使用基本类型指定泛型。</p>\n<p>2.在实例化泛型类时，如果没有指定具体的类型，那么会将该实例化的对象类似于Object，但是不完全相等，该实例化的对象不会在编译时检查类型，而被指定为Object的泛型实例化对象会检查类型是否有错。</p>\n<p>3.在继承泛型时，如果子类保留父类中的泛型，子类亦为泛型，当子类没有保留父类中的泛型时，则子类按需实现。如果子类没有指定任何类型则泛型被擦出，类似于Object。当子类重写父类中的方法或者使用父类中的对象时，方法或者属性的类型随父类而定，反之，子类新增的方法和属性有子类自己指定。</p>\n<p>4.在使用泛型时并没有多态，也就是不能使用泛型父类声明泛型子类的对象；也不存在泛型数组。</p>\n<p>5.“？”代表通配符，用来声明变量或者形参，不能做它用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(List&lt;?&gt; list)</span></span>&#123;&#125;</div><div class=\"line\">List&lt;?&gt; list =<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</div></pre></td></tr></table></figure></p>\n<p>另外还有两个用于限制泛型范围的关键字”extends”和”super”，”extends”用来指定上线，”super”用来指定下限。</p>\n<p>6.在使用泛型嵌套的时候，需要由外到内逐层获取，在遍历map的时候经常会用到（entrySet）。</p>"},{"title":"idea使用介绍","date":"2016-11-24T09:07:40.000Z","_content":"### 本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。\n#### 工具窗口调用\n| Tool Window | Shortcut |\n|--------|--------|\n| Project | Alt+1 |\n| Version Control | Alt+9 |\n| Run | Alt+4 |\n| Debug | Alt+5 |\n| Terminal | Alt+F12 |\n| Editor | ESC |\n<!--more-->\n当你想要聚焦于代码时，试试**Distraction Free Mode**。它去掉了所有的工具条、工具窗口和编辑器选项。在主菜单打开`View | Enter Distraction Free Mode`。\n你也可以使用`Ctrl + Shift + F12`隐藏所有的工具窗口，再次使用快捷键将回到默认的界面。\n导航条是一个复杂的可选择的到项目工具窗口，你可以使用`Alt + Home`跳转到导航条。在导航条你可选择要查看的目录。\n#### 代码补全\n1.基础的自动补全快捷键为`Ctrl + Space`，但是这和linux下默认的输入法切换时冲突的，你可以自行修改为其它快捷键，比如`Alt + /`，哈哈。当然如果你不修改快捷键的话，也可以使用智能补全`Ctrl + Shift + Space`。\n2.为了使用IDEA补全一个声明，你可以使用快捷键`Ctrl + Shift + Enter`，这将自动的添加那些丢失的括号以及必要的格式。如果没有要补全的内容就会跳转到下一新行，你想问怎么跳转到上一新行？使用`Ctrl + Alt + Enter`\n3.我们经常会遇到很多重载的构造器或者方法，如果你想要查看它们可以传入的参数，就可以使用快捷键`Ctrl + P`，并且它们可是高亮的哟。\n4.其实IDEA在爽的补全并不是上面的这些快捷键，而是你什么快捷键都不用使用，当你输入一个代码的时候，它会自动的分析，并且依据你的输入自动的给你相关的提示，在你的变量、方法等后使用一个**'.'**会自动提示你可以跟在你的代码后的内容。\n\n#### 编辑器基础\n**最有用的**编辑器快捷键是：\n\n| Action | Description |\n|--------|--------|\n| 移动当前行的代码 | Ctrl + Shift + Up/Down |\n| 复制一行代码 | Ctrl + D |\n| 移除一行代码 | Ctrl + Y |\n| 注释一行代码 | Ctrl + / |\n| 注释多行代码 | Ctrl + Shift + / |\n| 在当前文件中发现内容 | Ctrl + F |\n| 发现并且取代当前的内容 | Ctrl + R |\n| 在打开的选项卡间跳转 | Alt + right/left |\n| 向前或向后导航 | Ctrl + Alt + right/left |\n| 构造器，get/set方法 | Alt + insert |\n\n#### 导航\n* `Ctrl + E`打开最近的文件，默认的光标是在你当前的文件上。\n* `Ctrl + N`导航到一个类。\n* `Ctrl + Shift + N`导航到一个文件。\n* `Ctrl + F12`查看一个类的结构。\n* `Double Shift`名为到处寻找，很强大，IDEA想找哪就找哪！\n* `Ctrl + B`打开注释。\n* `Ctrl + Q`弹出注释，就是和上面打开的方式不一样，作用是一样的。\n* `Ctrl + H`打开一个文件的继承链。\n\n#### 代码样式和格式化\n1.使用`Ctrl + Alt + L`可以重新格式化代码，但是对其中的中文的支持不是很好。\n2.使用`Ctrl + Alt + I`可以实现自动缩进。\n3.使用`Ctrl + Alt + Q`可以优化导入。\n\n不过一般情况下IDEA会自动将格式优化的比较好。\n#### 运行和Debug\nRun：`Shift + F10`\nDebug：`Shift + F9`\n\n关于IDEA基础使用的介绍就到这里了，这些快捷使用方式都是在开发中很常用的，一定得记牢了！\n>本文是在IDEA官网查看翻译**Discover IDEA**，外加自己使用的一些心得，翻译的不好敬请见谅。","source":"_posts/ideaKeymap.md","raw":"---\ntitle: idea使用介绍\ndate: 2016-11-24 17:07:40\ntags: idea\ncategories: 开发工具\n---\n### 本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。\n#### 工具窗口调用\n| Tool Window | Shortcut |\n|--------|--------|\n| Project | Alt+1 |\n| Version Control | Alt+9 |\n| Run | Alt+4 |\n| Debug | Alt+5 |\n| Terminal | Alt+F12 |\n| Editor | ESC |\n<!--more-->\n当你想要聚焦于代码时，试试**Distraction Free Mode**。它去掉了所有的工具条、工具窗口和编辑器选项。在主菜单打开`View | Enter Distraction Free Mode`。\n你也可以使用`Ctrl + Shift + F12`隐藏所有的工具窗口，再次使用快捷键将回到默认的界面。\n导航条是一个复杂的可选择的到项目工具窗口，你可以使用`Alt + Home`跳转到导航条。在导航条你可选择要查看的目录。\n#### 代码补全\n1.基础的自动补全快捷键为`Ctrl + Space`，但是这和linux下默认的输入法切换时冲突的，你可以自行修改为其它快捷键，比如`Alt + /`，哈哈。当然如果你不修改快捷键的话，也可以使用智能补全`Ctrl + Shift + Space`。\n2.为了使用IDEA补全一个声明，你可以使用快捷键`Ctrl + Shift + Enter`，这将自动的添加那些丢失的括号以及必要的格式。如果没有要补全的内容就会跳转到下一新行，你想问怎么跳转到上一新行？使用`Ctrl + Alt + Enter`\n3.我们经常会遇到很多重载的构造器或者方法，如果你想要查看它们可以传入的参数，就可以使用快捷键`Ctrl + P`，并且它们可是高亮的哟。\n4.其实IDEA在爽的补全并不是上面的这些快捷键，而是你什么快捷键都不用使用，当你输入一个代码的时候，它会自动的分析，并且依据你的输入自动的给你相关的提示，在你的变量、方法等后使用一个**'.'**会自动提示你可以跟在你的代码后的内容。\n\n#### 编辑器基础\n**最有用的**编辑器快捷键是：\n\n| Action | Description |\n|--------|--------|\n| 移动当前行的代码 | Ctrl + Shift + Up/Down |\n| 复制一行代码 | Ctrl + D |\n| 移除一行代码 | Ctrl + Y |\n| 注释一行代码 | Ctrl + / |\n| 注释多行代码 | Ctrl + Shift + / |\n| 在当前文件中发现内容 | Ctrl + F |\n| 发现并且取代当前的内容 | Ctrl + R |\n| 在打开的选项卡间跳转 | Alt + right/left |\n| 向前或向后导航 | Ctrl + Alt + right/left |\n| 构造器，get/set方法 | Alt + insert |\n\n#### 导航\n* `Ctrl + E`打开最近的文件，默认的光标是在你当前的文件上。\n* `Ctrl + N`导航到一个类。\n* `Ctrl + Shift + N`导航到一个文件。\n* `Ctrl + F12`查看一个类的结构。\n* `Double Shift`名为到处寻找，很强大，IDEA想找哪就找哪！\n* `Ctrl + B`打开注释。\n* `Ctrl + Q`弹出注释，就是和上面打开的方式不一样，作用是一样的。\n* `Ctrl + H`打开一个文件的继承链。\n\n#### 代码样式和格式化\n1.使用`Ctrl + Alt + L`可以重新格式化代码，但是对其中的中文的支持不是很好。\n2.使用`Ctrl + Alt + I`可以实现自动缩进。\n3.使用`Ctrl + Alt + Q`可以优化导入。\n\n不过一般情况下IDEA会自动将格式优化的比较好。\n#### 运行和Debug\nRun：`Shift + F10`\nDebug：`Shift + F9`\n\n关于IDEA基础使用的介绍就到这里了，这些快捷使用方式都是在开发中很常用的，一定得记牢了！\n>本文是在IDEA官网查看翻译**Discover IDEA**，外加自己使用的一些心得，翻译的不好敬请见谅。","slug":"ideaKeymap","published":1,"updated":"2016-11-24T15:02:38.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz8h000jbakznfo8qzy6","content":"<h3 id=\"本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。\"><a href=\"#本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。\" class=\"headerlink\" title=\"本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。\"></a>本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。</h3><h4 id=\"工具窗口调用\"><a href=\"#工具窗口调用\" class=\"headerlink\" title=\"工具窗口调用\"></a>工具窗口调用</h4><table>\n<thead>\n<tr>\n<th>Tool Window</th>\n<th>Shortcut</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Project</td>\n<td>Alt+1</td>\n</tr>\n<tr>\n<td>Version Control</td>\n<td>Alt+9</td>\n</tr>\n<tr>\n<td>Run</td>\n<td>Alt+4</td>\n</tr>\n<tr>\n<td>Debug</td>\n<td>Alt+5</td>\n</tr>\n<tr>\n<td>Terminal</td>\n<td>Alt+F12</td>\n</tr>\n<tr>\n<td>Editor</td>\n<td>ESC</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<p>当你想要聚焦于代码时，试试<strong>Distraction Free Mode</strong>。它去掉了所有的工具条、工具窗口和编辑器选项。在主菜单打开<code>View | Enter Distraction Free Mode</code>。<br>你也可以使用<code>Ctrl + Shift + F12</code>隐藏所有的工具窗口，再次使用快捷键将回到默认的界面。<br>导航条是一个复杂的可选择的到项目工具窗口，你可以使用<code>Alt + Home</code>跳转到导航条。在导航条你可选择要查看的目录。</p>\n<h4 id=\"代码补全\"><a href=\"#代码补全\" class=\"headerlink\" title=\"代码补全\"></a>代码补全</h4><p>1.基础的自动补全快捷键为<code>Ctrl + Space</code>，但是这和linux下默认的输入法切换时冲突的，你可以自行修改为其它快捷键，比如<code>Alt + /</code>，哈哈。当然如果你不修改快捷键的话，也可以使用智能补全<code>Ctrl + Shift + Space</code>。<br>2.为了使用IDEA补全一个声明，你可以使用快捷键<code>Ctrl + Shift + Enter</code>，这将自动的添加那些丢失的括号以及必要的格式。如果没有要补全的内容就会跳转到下一新行，你想问怎么跳转到上一新行？使用<code>Ctrl + Alt + Enter</code><br>3.我们经常会遇到很多重载的构造器或者方法，如果你想要查看它们可以传入的参数，就可以使用快捷键<code>Ctrl + P</code>，并且它们可是高亮的哟。<br>4.其实IDEA在爽的补全并不是上面的这些快捷键，而是你什么快捷键都不用使用，当你输入一个代码的时候，它会自动的分析，并且依据你的输入自动的给你相关的提示，在你的变量、方法等后使用一个<strong>‘.’</strong>会自动提示你可以跟在你的代码后的内容。</p>\n<h4 id=\"编辑器基础\"><a href=\"#编辑器基础\" class=\"headerlink\" title=\"编辑器基础\"></a>编辑器基础</h4><p><strong>最有用的</strong>编辑器快捷键是：</p>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>移动当前行的代码</td>\n<td>Ctrl + Shift + Up/Down</td>\n</tr>\n<tr>\n<td>复制一行代码</td>\n<td>Ctrl + D</td>\n</tr>\n<tr>\n<td>移除一行代码</td>\n<td>Ctrl + Y</td>\n</tr>\n<tr>\n<td>注释一行代码</td>\n<td>Ctrl + /</td>\n</tr>\n<tr>\n<td>注释多行代码</td>\n<td>Ctrl + Shift + /</td>\n</tr>\n<tr>\n<td>在当前文件中发现内容</td>\n<td>Ctrl + F</td>\n</tr>\n<tr>\n<td>发现并且取代当前的内容</td>\n<td>Ctrl + R</td>\n</tr>\n<tr>\n<td>在打开的选项卡间跳转</td>\n<td>Alt + right/left</td>\n</tr>\n<tr>\n<td>向前或向后导航</td>\n<td>Ctrl + Alt + right/left</td>\n</tr>\n<tr>\n<td>构造器，get/set方法</td>\n<td>Alt + insert</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h4><ul>\n<li><code>Ctrl + E</code>打开最近的文件，默认的光标是在你当前的文件上。</li>\n<li><code>Ctrl + N</code>导航到一个类。</li>\n<li><code>Ctrl + Shift + N</code>导航到一个文件。</li>\n<li><code>Ctrl + F12</code>查看一个类的结构。</li>\n<li><code>Double Shift</code>名为到处寻找，很强大，IDEA想找哪就找哪！</li>\n<li><code>Ctrl + B</code>打开注释。</li>\n<li><code>Ctrl + Q</code>弹出注释，就是和上面打开的方式不一样，作用是一样的。</li>\n<li><code>Ctrl + H</code>打开一个文件的继承链。</li>\n</ul>\n<h4 id=\"代码样式和格式化\"><a href=\"#代码样式和格式化\" class=\"headerlink\" title=\"代码样式和格式化\"></a>代码样式和格式化</h4><p>1.使用<code>Ctrl + Alt + L</code>可以重新格式化代码，但是对其中的中文的支持不是很好。<br>2.使用<code>Ctrl + Alt + I</code>可以实现自动缩进。<br>3.使用<code>Ctrl + Alt + Q</code>可以优化导入。</p>\n<p>不过一般情况下IDEA会自动将格式优化的比较好。</p>\n<h4 id=\"运行和Debug\"><a href=\"#运行和Debug\" class=\"headerlink\" title=\"运行和Debug\"></a>运行和Debug</h4><p>Run：<code>Shift + F10</code><br>Debug：<code>Shift + F9</code></p>\n<p>关于IDEA基础使用的介绍就到这里了，这些快捷使用方式都是在开发中很常用的，一定得记牢了！</p>\n<blockquote>\n<p>本文是在IDEA官网查看翻译<strong>Discover IDEA</strong>，外加自己使用的一些心得，翻译的不好敬请见谅。</p>\n</blockquote>\n","excerpt":"<h3 id=\"本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。\"><a href=\"#本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。\" class=\"headerlink\" title=\"本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。\"></a>本篇文章是为了帮助你更加高效的使用IDEA，提供给你一些最重要的特性的概要，以及一些小提示和技巧，还有最热门的快捷键。</h3><h4 id=\"工具窗口调用\"><a href=\"#工具窗口调用\" class=\"headerlink\" title=\"工具窗口调用\"></a>工具窗口调用</h4><table>\n<thead>\n<tr>\n<th>Tool Window</th>\n<th>Shortcut</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Project</td>\n<td>Alt+1</td>\n</tr>\n<tr>\n<td>Version Control</td>\n<td>Alt+9</td>\n</tr>\n<tr>\n<td>Run</td>\n<td>Alt+4</td>\n</tr>\n<tr>\n<td>Debug</td>\n<td>Alt+5</td>\n</tr>\n<tr>\n<td>Terminal</td>\n<td>Alt+F12</td>\n</tr>\n<tr>\n<td>Editor</td>\n<td>ESC</td>\n</tr>\n</tbody>\n</table>","more":"<p>当你想要聚焦于代码时，试试<strong>Distraction Free Mode</strong>。它去掉了所有的工具条、工具窗口和编辑器选项。在主菜单打开<code>View | Enter Distraction Free Mode</code>。<br>你也可以使用<code>Ctrl + Shift + F12</code>隐藏所有的工具窗口，再次使用快捷键将回到默认的界面。<br>导航条是一个复杂的可选择的到项目工具窗口，你可以使用<code>Alt + Home</code>跳转到导航条。在导航条你可选择要查看的目录。</p>\n<h4 id=\"代码补全\"><a href=\"#代码补全\" class=\"headerlink\" title=\"代码补全\"></a>代码补全</h4><p>1.基础的自动补全快捷键为<code>Ctrl + Space</code>，但是这和linux下默认的输入法切换时冲突的，你可以自行修改为其它快捷键，比如<code>Alt + /</code>，哈哈。当然如果你不修改快捷键的话，也可以使用智能补全<code>Ctrl + Shift + Space</code>。<br>2.为了使用IDEA补全一个声明，你可以使用快捷键<code>Ctrl + Shift + Enter</code>，这将自动的添加那些丢失的括号以及必要的格式。如果没有要补全的内容就会跳转到下一新行，你想问怎么跳转到上一新行？使用<code>Ctrl + Alt + Enter</code><br>3.我们经常会遇到很多重载的构造器或者方法，如果你想要查看它们可以传入的参数，就可以使用快捷键<code>Ctrl + P</code>，并且它们可是高亮的哟。<br>4.其实IDEA在爽的补全并不是上面的这些快捷键，而是你什么快捷键都不用使用，当你输入一个代码的时候，它会自动的分析，并且依据你的输入自动的给你相关的提示，在你的变量、方法等后使用一个<strong>‘.’</strong>会自动提示你可以跟在你的代码后的内容。</p>\n<h4 id=\"编辑器基础\"><a href=\"#编辑器基础\" class=\"headerlink\" title=\"编辑器基础\"></a>编辑器基础</h4><p><strong>最有用的</strong>编辑器快捷键是：</p>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>移动当前行的代码</td>\n<td>Ctrl + Shift + Up/Down</td>\n</tr>\n<tr>\n<td>复制一行代码</td>\n<td>Ctrl + D</td>\n</tr>\n<tr>\n<td>移除一行代码</td>\n<td>Ctrl + Y</td>\n</tr>\n<tr>\n<td>注释一行代码</td>\n<td>Ctrl + /</td>\n</tr>\n<tr>\n<td>注释多行代码</td>\n<td>Ctrl + Shift + /</td>\n</tr>\n<tr>\n<td>在当前文件中发现内容</td>\n<td>Ctrl + F</td>\n</tr>\n<tr>\n<td>发现并且取代当前的内容</td>\n<td>Ctrl + R</td>\n</tr>\n<tr>\n<td>在打开的选项卡间跳转</td>\n<td>Alt + right/left</td>\n</tr>\n<tr>\n<td>向前或向后导航</td>\n<td>Ctrl + Alt + right/left</td>\n</tr>\n<tr>\n<td>构造器，get/set方法</td>\n<td>Alt + insert</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h4><ul>\n<li><code>Ctrl + E</code>打开最近的文件，默认的光标是在你当前的文件上。</li>\n<li><code>Ctrl + N</code>导航到一个类。</li>\n<li><code>Ctrl + Shift + N</code>导航到一个文件。</li>\n<li><code>Ctrl + F12</code>查看一个类的结构。</li>\n<li><code>Double Shift</code>名为到处寻找，很强大，IDEA想找哪就找哪！</li>\n<li><code>Ctrl + B</code>打开注释。</li>\n<li><code>Ctrl + Q</code>弹出注释，就是和上面打开的方式不一样，作用是一样的。</li>\n<li><code>Ctrl + H</code>打开一个文件的继承链。</li>\n</ul>\n<h4 id=\"代码样式和格式化\"><a href=\"#代码样式和格式化\" class=\"headerlink\" title=\"代码样式和格式化\"></a>代码样式和格式化</h4><p>1.使用<code>Ctrl + Alt + L</code>可以重新格式化代码，但是对其中的中文的支持不是很好。<br>2.使用<code>Ctrl + Alt + I</code>可以实现自动缩进。<br>3.使用<code>Ctrl + Alt + Q</code>可以优化导入。</p>\n<p>不过一般情况下IDEA会自动将格式优化的比较好。</p>\n<h4 id=\"运行和Debug\"><a href=\"#运行和Debug\" class=\"headerlink\" title=\"运行和Debug\"></a>运行和Debug</h4><p>Run：<code>Shift + F10</code><br>Debug：<code>Shift + F9</code></p>\n<p>关于IDEA基础使用的介绍就到这里了，这些快捷使用方式都是在开发中很常用的，一定得记牢了！</p>\n<blockquote>\n<p>本文是在IDEA官网查看翻译<strong>Discover IDEA</strong>，外加自己使用的一些心得，翻译的不好敬请见谅。</p>\n</blockquote>"},{"title":"Use Hexo","date":"2016-10-05T04:25:08.000Z","_content":"以下试用ubuntu下利用github pages搭建hexo博客，windows下流程与此类似，可以作参考。\n## 环境搭建\n* ### git\n首先需要在系统中安装git：`sudo apt install git`\n可以先检查是否安装git：`git --version`\n<!--more-->\n然后是对git的一些基本配置：\n`git config --global user.name \"username\"`\n`git config --global user.email \"youremail\"`\n对于使用hexo你不需要太多的git技巧，还有要用到的git命令：\n`git clone repo_url`（这里的仓库地址有两种形式，一种是https，一种是ssh，推荐使用ssh，ssh的速度更快，并且避免了重复验证用户名和密码的麻烦）\n这里推荐<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰的git教程</a>\n\n* ### nodejs\n安装：`sudo apt install nodejs`\n还需安装npm(nodejs的包管理工具)：`sudo apt insatll npm`\n上面两个在windows下可以直接绑定安装\nnpm管理工具的使用：\n升级新版npm：`sudo npm install npm -g`\n使用npm安装模块：`npm install module_name`\n**安装hexo包：`npm install hexo-cli -g`**\n查看所有全局安装的npm模块：`npm ls -g`\n模块的卸载：`npm uninstall module_name`\n更新模块：`npm update module_name`\n但是使用npm安装模块时速度太慢，可以使用淘宝镜像或者请科学上网。<a href=\"https://github.com/getlantern/lantern\">lantern</a>\n* ### github\n1.注册一个github账户，成为轮子哥口中所谓的（re）poer。\n2.打开个人的profile，点击右上角的**+**，new一个repository（新建一个仓库），注意，要将你的repository name设置为[username.github.io]，这一步很重要。然后其它的不用管，直接create repository。\n3.配置ssh keys，在settings中打开SSH and GPG keys，new一个ssh key。在下面的输入框中填写的你本机的ssh公钥，使用`ssh-keygen -t rsa -C \"youremail\"`，在你的用户目录下找到.ssh目录中的id_rsa.pub的内容，也就是你本机ssh公钥，然后点击添加。可以使用`cat id_rsa.pub`查看其中的内容。\n4.验证：`ssh -T git@github.com`，看到successfully就说明配置完成了。\n\n\n## 常用指令\n\n* **新建博客项目，默认为指定的folder文件夹;**\n`hexo init [folder]`\n* **新建文章，总共有post、draft、page三种layout，文章以你指定的title名创建，title中如果有空格请使用“”括起来;**\n`hexo new [layout] <title>`\n* **生成静态文件，下面的代码为简写，可以添加-w参数监视文件的变动;**\n`hexo generate`\n`hexo g`\n* **启动本地服务器，可以添加参数-p指定服务器的端口，默认在端口4000**\n`hexo server`\n`hexo s`\n* **博客项目部署**\n`hexo deploy`\n`hexo d`\n* **一键静态文件生成与部署**\n`hexo g -d`\n`hexo d -g`\n* **清楚缓存和生成的静态文件，对应于db.json和public目录下的文件**\n`hexo clean`\n`hexo cl`\n* **列出博客文件树**\n`hexo list route`\n\n## 补充\n1.安装nodejs和npm的时候，最好使用源码包安装，ubuntu源中的安装包一般版本较旧，安装好之后可以使用npm淘宝镜像，在npmrc文件中加入`registry=https://registry.npm.taobao.org`\n2.重新安装的时候要记得安装部署插件**hexo-deployer-git**(因为我是部署在github上的)。\n3.安装hexo时，请使用超级用户权限，否则无法正确写入文件，要是在安装无法完成请先使用`npm cache clean`清理npm缓存。","source":"_posts/hexo常用操作.md","raw":"---\ntitle: Use Hexo\ndate: 2016-10-05 12:25:08\ntags: hexo\ncategories: 博客构建\n---\n以下试用ubuntu下利用github pages搭建hexo博客，windows下流程与此类似，可以作参考。\n## 环境搭建\n* ### git\n首先需要在系统中安装git：`sudo apt install git`\n可以先检查是否安装git：`git --version`\n<!--more-->\n然后是对git的一些基本配置：\n`git config --global user.name \"username\"`\n`git config --global user.email \"youremail\"`\n对于使用hexo你不需要太多的git技巧，还有要用到的git命令：\n`git clone repo_url`（这里的仓库地址有两种形式，一种是https，一种是ssh，推荐使用ssh，ssh的速度更快，并且避免了重复验证用户名和密码的麻烦）\n这里推荐<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰的git教程</a>\n\n* ### nodejs\n安装：`sudo apt install nodejs`\n还需安装npm(nodejs的包管理工具)：`sudo apt insatll npm`\n上面两个在windows下可以直接绑定安装\nnpm管理工具的使用：\n升级新版npm：`sudo npm install npm -g`\n使用npm安装模块：`npm install module_name`\n**安装hexo包：`npm install hexo-cli -g`**\n查看所有全局安装的npm模块：`npm ls -g`\n模块的卸载：`npm uninstall module_name`\n更新模块：`npm update module_name`\n但是使用npm安装模块时速度太慢，可以使用淘宝镜像或者请科学上网。<a href=\"https://github.com/getlantern/lantern\">lantern</a>\n* ### github\n1.注册一个github账户，成为轮子哥口中所谓的（re）poer。\n2.打开个人的profile，点击右上角的**+**，new一个repository（新建一个仓库），注意，要将你的repository name设置为[username.github.io]，这一步很重要。然后其它的不用管，直接create repository。\n3.配置ssh keys，在settings中打开SSH and GPG keys，new一个ssh key。在下面的输入框中填写的你本机的ssh公钥，使用`ssh-keygen -t rsa -C \"youremail\"`，在你的用户目录下找到.ssh目录中的id_rsa.pub的内容，也就是你本机ssh公钥，然后点击添加。可以使用`cat id_rsa.pub`查看其中的内容。\n4.验证：`ssh -T git@github.com`，看到successfully就说明配置完成了。\n\n\n## 常用指令\n\n* **新建博客项目，默认为指定的folder文件夹;**\n`hexo init [folder]`\n* **新建文章，总共有post、draft、page三种layout，文章以你指定的title名创建，title中如果有空格请使用“”括起来;**\n`hexo new [layout] <title>`\n* **生成静态文件，下面的代码为简写，可以添加-w参数监视文件的变动;**\n`hexo generate`\n`hexo g`\n* **启动本地服务器，可以添加参数-p指定服务器的端口，默认在端口4000**\n`hexo server`\n`hexo s`\n* **博客项目部署**\n`hexo deploy`\n`hexo d`\n* **一键静态文件生成与部署**\n`hexo g -d`\n`hexo d -g`\n* **清楚缓存和生成的静态文件，对应于db.json和public目录下的文件**\n`hexo clean`\n`hexo cl`\n* **列出博客文件树**\n`hexo list route`\n\n## 补充\n1.安装nodejs和npm的时候，最好使用源码包安装，ubuntu源中的安装包一般版本较旧，安装好之后可以使用npm淘宝镜像，在npmrc文件中加入`registry=https://registry.npm.taobao.org`\n2.重新安装的时候要记得安装部署插件**hexo-deployer-git**(因为我是部署在github上的)。\n3.安装hexo时，请使用超级用户权限，否则无法正确写入文件，要是在安装无法完成请先使用`npm cache clean`清理npm缓存。","slug":"hexo常用操作","published":1,"updated":"2016-10-23T07:55:39.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz8q000nbakzxlz74t9b","content":"<p>以下试用ubuntu下利用github pages搭建hexo博客，windows下流程与此类似，可以作参考。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><ul>\n<li><h3 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h3><p>首先需要在系统中安装git：<code>sudo apt install git</code><br>可以先检查是否安装git：<code>git --version</code></p>\n<a id=\"more\"></a>\n<p>然后是对git的一些基本配置：<br><code>git config --global user.name &quot;username&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code><br>对于使用hexo你不需要太多的git技巧，还有要用到的git命令：<br><code>git clone repo_url</code>（这里的仓库地址有两种形式，一种是https，一种是ssh，推荐使用ssh，ssh的速度更快，并且避免了重复验证用户名和密码的麻烦）<br>这里推荐<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">廖雪峰的git教程</a></p>\n</li>\n<li><h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><p>安装：<code>sudo apt install nodejs</code><br>还需安装npm(nodejs的包管理工具)：<code>sudo apt insatll npm</code><br>上面两个在windows下可以直接绑定安装<br>npm管理工具的使用：<br>升级新版npm：<code>sudo npm install npm -g</code><br>使用npm安装模块：<code>npm install module_name</code><br><strong>安装hexo包：<code>npm install hexo-cli -g</code></strong><br>查看所有全局安装的npm模块：<code>npm ls -g</code><br>模块的卸载：<code>npm uninstall module_name</code><br>更新模块：<code>npm update module_name</code><br>但是使用npm安装模块时速度太慢，可以使用淘宝镜像或者请科学上网。<a href=\"https://github.com/getlantern/lantern\" target=\"_blank\" rel=\"external\">lantern</a></p>\n</li>\n<li><h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h3>1.注册一个github账户，成为轮子哥口中所谓的（re）poer。<br>2.打开个人的profile，点击右上角的<strong>+</strong>，new一个repository（新建一个仓库），注意，要将你的repository name设置为[username.github.io]，这一步很重要。然后其它的不用管，直接create repository。<br>3.配置ssh keys，在settings中打开SSH and GPG keys，new一个ssh key。在下面的输入框中填写的你本机的ssh公钥，使用<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code>，在你的用户目录下找到.ssh目录中的id_rsa.pub的内容，也就是你本机ssh公钥，然后点击添加。可以使用<code>cat id_rsa.pub</code>查看其中的内容。<br>4.验证：<code>ssh -T git@github.com</code>，看到successfully就说明配置完成了。</li>\n</ul>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><ul>\n<li><strong>新建博客项目，默认为指定的folder文件夹;</strong><br><code>hexo init [folder]</code></li>\n<li><strong>新建文章，总共有post、draft、page三种layout，文章以你指定的title名创建，title中如果有空格请使用“”括起来;</strong><br><code>hexo new [layout] &lt;title&gt;</code></li>\n<li><strong>生成静态文件，下面的代码为简写，可以添加-w参数监视文件的变动;</strong><br><code>hexo generate</code><br><code>hexo g</code></li>\n<li><strong>启动本地服务器，可以添加参数-p指定服务器的端口，默认在端口4000</strong><br><code>hexo server</code><br><code>hexo s</code></li>\n<li><strong>博客项目部署</strong><br><code>hexo deploy</code><br><code>hexo d</code></li>\n<li><strong>一键静态文件生成与部署</strong><br><code>hexo g -d</code><br><code>hexo d -g</code></li>\n<li><strong>清楚缓存和生成的静态文件，对应于db.json和public目录下的文件</strong><br><code>hexo clean</code><br><code>hexo cl</code></li>\n<li><strong>列出博客文件树</strong><br><code>hexo list route</code></li>\n</ul>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>1.安装nodejs和npm的时候，最好使用源码包安装，ubuntu源中的安装包一般版本较旧，安装好之后可以使用npm淘宝镜像，在npmrc文件中加入<code>registry=https://registry.npm.taobao.org</code><br>2.重新安装的时候要记得安装部署插件<strong>hexo-deployer-git</strong>(因为我是部署在github上的)。<br>3.安装hexo时，请使用超级用户权限，否则无法正确写入文件，要是在安装无法完成请先使用<code>npm cache clean</code>清理npm缓存。</p>\n","excerpt":"<p>以下试用ubuntu下利用github pages搭建hexo博客，windows下流程与此类似，可以作参考。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><ul>\n<li><h3 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h3><p>首先需要在系统中安装git：<code>sudo apt install git</code><br>可以先检查是否安装git：<code>git --version</code></p>","more":"<p>然后是对git的一些基本配置：<br><code>git config --global user.name &quot;username&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code><br>对于使用hexo你不需要太多的git技巧，还有要用到的git命令：<br><code>git clone repo_url</code>（这里的仓库地址有两种形式，一种是https，一种是ssh，推荐使用ssh，ssh的速度更快，并且避免了重复验证用户名和密码的麻烦）<br>这里推荐<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰的git教程</a></p>\n</li>\n<li><h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><p>安装：<code>sudo apt install nodejs</code><br>还需安装npm(nodejs的包管理工具)：<code>sudo apt insatll npm</code><br>上面两个在windows下可以直接绑定安装<br>npm管理工具的使用：<br>升级新版npm：<code>sudo npm install npm -g</code><br>使用npm安装模块：<code>npm install module_name</code><br><strong>安装hexo包：<code>npm install hexo-cli -g</code></strong><br>查看所有全局安装的npm模块：<code>npm ls -g</code><br>模块的卸载：<code>npm uninstall module_name</code><br>更新模块：<code>npm update module_name</code><br>但是使用npm安装模块时速度太慢，可以使用淘宝镜像或者请科学上网。<a href=\"https://github.com/getlantern/lantern\">lantern</a></p>\n</li>\n<li><h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h3>1.注册一个github账户，成为轮子哥口中所谓的（re）poer。<br>2.打开个人的profile，点击右上角的<strong>+</strong>，new一个repository（新建一个仓库），注意，要将你的repository name设置为[username.github.io]，这一步很重要。然后其它的不用管，直接create repository。<br>3.配置ssh keys，在settings中打开SSH and GPG keys，new一个ssh key。在下面的输入框中填写的你本机的ssh公钥，使用<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code>，在你的用户目录下找到.ssh目录中的id_rsa.pub的内容，也就是你本机ssh公钥，然后点击添加。可以使用<code>cat id_rsa.pub</code>查看其中的内容。<br>4.验证：<code>ssh -T git@github.com</code>，看到successfully就说明配置完成了。</li>\n</ul>\n<h2 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h2><ul>\n<li><strong>新建博客项目，默认为指定的folder文件夹;</strong><br><code>hexo init [folder]</code></li>\n<li><strong>新建文章，总共有post、draft、page三种layout，文章以你指定的title名创建，title中如果有空格请使用“”括起来;</strong><br><code>hexo new [layout] &lt;title&gt;</code></li>\n<li><strong>生成静态文件，下面的代码为简写，可以添加-w参数监视文件的变动;</strong><br><code>hexo generate</code><br><code>hexo g</code></li>\n<li><strong>启动本地服务器，可以添加参数-p指定服务器的端口，默认在端口4000</strong><br><code>hexo server</code><br><code>hexo s</code></li>\n<li><strong>博客项目部署</strong><br><code>hexo deploy</code><br><code>hexo d</code></li>\n<li><strong>一键静态文件生成与部署</strong><br><code>hexo g -d</code><br><code>hexo d -g</code></li>\n<li><strong>清楚缓存和生成的静态文件，对应于db.json和public目录下的文件</strong><br><code>hexo clean</code><br><code>hexo cl</code></li>\n<li><strong>列出博客文件树</strong><br><code>hexo list route</code></li>\n</ul>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>1.安装nodejs和npm的时候，最好使用源码包安装，ubuntu源中的安装包一般版本较旧，安装好之后可以使用npm淘宝镜像，在npmrc文件中加入<code>registry=https://registry.npm.taobao.org</code><br>2.重新安装的时候要记得安装部署插件<strong>hexo-deployer-git</strong>(因为我是部署在github上的)。<br>3.安装hexo时，请使用超级用户权限，否则无法正确写入文件，要是在安装无法完成请先使用<code>npm cache clean</code>清理npm缓存。</p>"},{"title":"java中的垃圾回收与内存分配","date":"2016-10-15T07:44:08.000Z","_content":"java中GC涉及到java内存的分配与回收管理。虽然jvm承诺自动回收java的内存，但是java依然会出现内存的泄漏，也就是一些无用的内存无法回收的问题。由于java程序员无法直接控制jvm回收无用内存，即便是调用`System.gc()`，也只是建议jvm实施垃圾回收，但是具体的回收过程还是无法立即实现。由于盏内存随着方法的结束被回收，而且栈内存大小一般在运行期间就已经确定，所以这里涉及到的主要是堆内存的回收与分配。\n<!--more-->\n### 回收机制\n1.当某个对象处于不可达的状态，也就是没有任何的引用指向该对象，便会准备回收该对象的内存；\n2.jvm要清理、分配内存，整理回收过程中产生的内存碎片。\n\n### 垃圾回收的基本算法\njava虚拟机在执行垃圾回收时，会判断每个对象所处的状态，依据其存在时间的长短，将其分为Young、Old、Permanent，对不同代的对象执行的回收算法也不相一致。\n1.绝大多数的对象不会被长时间的引用，这些对象在年轻代就被回收。针对年轻代的对象，虚拟机会开辟一个Eden区和两个Survivor区，其中Eden区存放着绝大多数的年轻对象，有些较大的年轻对象则直接存放到Old代的内存区，而两个Survivor区中有一个区存放对象,这个区中的年轻代的对象至少经历过一次回收，另一个区是空的。对于年轻代的对象采用的是复制算法（copying），具体来讲就是当年轻代所占用的空间快要占满时，判断年轻代中在Eden和Survivor区中可达的对象，将其存放到另一个空的Survivor区中，然后对Eden和Survivor区中的空间进行清理，将它们的内存回收作为新的Eden和Survivor区。默认的Eden和Survivor区的大小的比例为`32:1`。\n2.对于年轻代中多次回收任然可达的对象，将被存入Old代内存区。Old代需要的空间更大，并且由于Old代的对象一般存活的时间很长，不需要多次执行回收，所以其一般采用标记压缩（mark-sweep-compact）的回收算法。具体来讲就是，当这部分空间快要占满时，将Old代的可达对像逐个进行标记，将不可达的对象回收，然后将可达的对象空间进行压缩，等有新的对象存入时，存放在空间的尾端。\n3.Permanent代空间用于装载Class、Method的信息，默认是64M，通常不会执行回收，除非程序结束，随类的创建而加载。\n\n### 垃圾回收的相关选项\n\n```\n-Xmx: 堆内存最大容量\n-Xms: 堆初始容量\n-XX:MinHeapFreeRatio=size 堆内存最小空闲百分比\n-XX:MaxHeapFreeRatio=size 堆内存最大空闲百分比\n-XX:NewRatio=size　年轻代和年老代内存空间比\n-XX:NewSize=size　年轻代内存默认容量\n-XX:SurvivorRatio=size　Eden和Survivor空间的比例\n-XX:MaxNewSize=size　年轻代最大容量\n-XX:PermSize=size　持久代默认容量\n-XX:MaxPermSize=size　持久代最大容量\n```\n\n### 回收器\n1.串行回收器(Serial Collector)开辟一个单线程来进行内存的回收（单核CPU）,而并行回收器开辟多个线程进行回收(多核CPU),并行回收在运行是消耗更大，但是效率更高。在对年老代对象进行的是串行回收，而年轻代的回收则取决于具体服务器的核心数目。\n配置使用：\n```\n-XX:+Use SerialGC 使用串行GC回收器\n-XX:+Use ParallelGC　使用并行GC回收器\n-XX:ParallelGCThreads=size　配置并行GC回收器线程数目\n```\n2.java5.0之后引入并行压缩回收器，年轻代对象处理方式不变，将Old代对象分成了密集区与非密集区分别处理。\n配置使用：\n```\n-XX:+Use ParallelOldGC　使用并行GC\n-XX:ParallelOldGCThreads=size　配置并行GC线程数目\n```\n3.并发标识清理（Mark-Sweep CMS）\n并行处理GC不会出现程序暂停，而并发处理会引起程序短暂的暂停。由于CMS回收对象不压缩，所以其处理的空间不连续，间接地导致内存分配的效率下降。\n\n### 内存管理小技巧\n1.使用String和基本类的包装类时使用直接量，尽量不使用new操作符创建对象；\n2.使用StringBuilder和StringBuffer来操作字符串的连接操作；\n3.尽早释放无用的对象（obj=null）；\n4.尽量少用静态变量；\n5.避免循环创建对象；\n6.缓存经常使用的对象，可以利用数据连接池、HashMap等；\n7.尽量不使用finalize，这样会增加GC的负担；\n8.可以使用软引用；","source":"_posts/javaGC01.md","raw":"---\ntitle: java中的垃圾回收与内存分配\ndate: 2016-10-15 15:44:08\ntags: GC\ncategories: JavaSE\n---\njava中GC涉及到java内存的分配与回收管理。虽然jvm承诺自动回收java的内存，但是java依然会出现内存的泄漏，也就是一些无用的内存无法回收的问题。由于java程序员无法直接控制jvm回收无用内存，即便是调用`System.gc()`，也只是建议jvm实施垃圾回收，但是具体的回收过程还是无法立即实现。由于盏内存随着方法的结束被回收，而且栈内存大小一般在运行期间就已经确定，所以这里涉及到的主要是堆内存的回收与分配。\n<!--more-->\n### 回收机制\n1.当某个对象处于不可达的状态，也就是没有任何的引用指向该对象，便会准备回收该对象的内存；\n2.jvm要清理、分配内存，整理回收过程中产生的内存碎片。\n\n### 垃圾回收的基本算法\njava虚拟机在执行垃圾回收时，会判断每个对象所处的状态，依据其存在时间的长短，将其分为Young、Old、Permanent，对不同代的对象执行的回收算法也不相一致。\n1.绝大多数的对象不会被长时间的引用，这些对象在年轻代就被回收。针对年轻代的对象，虚拟机会开辟一个Eden区和两个Survivor区，其中Eden区存放着绝大多数的年轻对象，有些较大的年轻对象则直接存放到Old代的内存区，而两个Survivor区中有一个区存放对象,这个区中的年轻代的对象至少经历过一次回收，另一个区是空的。对于年轻代的对象采用的是复制算法（copying），具体来讲就是当年轻代所占用的空间快要占满时，判断年轻代中在Eden和Survivor区中可达的对象，将其存放到另一个空的Survivor区中，然后对Eden和Survivor区中的空间进行清理，将它们的内存回收作为新的Eden和Survivor区。默认的Eden和Survivor区的大小的比例为`32:1`。\n2.对于年轻代中多次回收任然可达的对象，将被存入Old代内存区。Old代需要的空间更大，并且由于Old代的对象一般存活的时间很长，不需要多次执行回收，所以其一般采用标记压缩（mark-sweep-compact）的回收算法。具体来讲就是，当这部分空间快要占满时，将Old代的可达对像逐个进行标记，将不可达的对象回收，然后将可达的对象空间进行压缩，等有新的对象存入时，存放在空间的尾端。\n3.Permanent代空间用于装载Class、Method的信息，默认是64M，通常不会执行回收，除非程序结束，随类的创建而加载。\n\n### 垃圾回收的相关选项\n\n```\n-Xmx: 堆内存最大容量\n-Xms: 堆初始容量\n-XX:MinHeapFreeRatio=size 堆内存最小空闲百分比\n-XX:MaxHeapFreeRatio=size 堆内存最大空闲百分比\n-XX:NewRatio=size　年轻代和年老代内存空间比\n-XX:NewSize=size　年轻代内存默认容量\n-XX:SurvivorRatio=size　Eden和Survivor空间的比例\n-XX:MaxNewSize=size　年轻代最大容量\n-XX:PermSize=size　持久代默认容量\n-XX:MaxPermSize=size　持久代最大容量\n```\n\n### 回收器\n1.串行回收器(Serial Collector)开辟一个单线程来进行内存的回收（单核CPU）,而并行回收器开辟多个线程进行回收(多核CPU),并行回收在运行是消耗更大，但是效率更高。在对年老代对象进行的是串行回收，而年轻代的回收则取决于具体服务器的核心数目。\n配置使用：\n```\n-XX:+Use SerialGC 使用串行GC回收器\n-XX:+Use ParallelGC　使用并行GC回收器\n-XX:ParallelGCThreads=size　配置并行GC回收器线程数目\n```\n2.java5.0之后引入并行压缩回收器，年轻代对象处理方式不变，将Old代对象分成了密集区与非密集区分别处理。\n配置使用：\n```\n-XX:+Use ParallelOldGC　使用并行GC\n-XX:ParallelOldGCThreads=size　配置并行GC线程数目\n```\n3.并发标识清理（Mark-Sweep CMS）\n并行处理GC不会出现程序暂停，而并发处理会引起程序短暂的暂停。由于CMS回收对象不压缩，所以其处理的空间不连续，间接地导致内存分配的效率下降。\n\n### 内存管理小技巧\n1.使用String和基本类的包装类时使用直接量，尽量不使用new操作符创建对象；\n2.使用StringBuilder和StringBuffer来操作字符串的连接操作；\n3.尽早释放无用的对象（obj=null）；\n4.尽量少用静态变量；\n5.避免循环创建对象；\n6.缓存经常使用的对象，可以利用数据连接池、HashMap等；\n7.尽量不使用finalize，这样会增加GC的负担；\n8.可以使用软引用；","slug":"javaGC01","published":1,"updated":"2016-10-23T02:38:42.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz8z000qbakzqvpifbfy","content":"<p>java中GC涉及到java内存的分配与回收管理。虽然jvm承诺自动回收java的内存，但是java依然会出现内存的泄漏，也就是一些无用的内存无法回收的问题。由于java程序员无法直接控制jvm回收无用内存，即便是调用<code>System.gc()</code>，也只是建议jvm实施垃圾回收，但是具体的回收过程还是无法立即实现。由于盏内存随着方法的结束被回收，而且栈内存大小一般在运行期间就已经确定，所以这里涉及到的主要是堆内存的回收与分配。<br><a id=\"more\"></a></p>\n<h3 id=\"回收机制\"><a href=\"#回收机制\" class=\"headerlink\" title=\"回收机制\"></a>回收机制</h3><p>1.当某个对象处于不可达的状态，也就是没有任何的引用指向该对象，便会准备回收该对象的内存；<br>2.jvm要清理、分配内存，整理回收过程中产生的内存碎片。</p>\n<h3 id=\"垃圾回收的基本算法\"><a href=\"#垃圾回收的基本算法\" class=\"headerlink\" title=\"垃圾回收的基本算法\"></a>垃圾回收的基本算法</h3><p>java虚拟机在执行垃圾回收时，会判断每个对象所处的状态，依据其存在时间的长短，将其分为Young、Old、Permanent，对不同代的对象执行的回收算法也不相一致。<br>1.绝大多数的对象不会被长时间的引用，这些对象在年轻代就被回收。针对年轻代的对象，虚拟机会开辟一个Eden区和两个Survivor区，其中Eden区存放着绝大多数的年轻对象，有些较大的年轻对象则直接存放到Old代的内存区，而两个Survivor区中有一个区存放对象,这个区中的年轻代的对象至少经历过一次回收，另一个区是空的。对于年轻代的对象采用的是复制算法（copying），具体来讲就是当年轻代所占用的空间快要占满时，判断年轻代中在Eden和Survivor区中可达的对象，将其存放到另一个空的Survivor区中，然后对Eden和Survivor区中的空间进行清理，将它们的内存回收作为新的Eden和Survivor区。默认的Eden和Survivor区的大小的比例为<code>32:1</code>。<br>2.对于年轻代中多次回收任然可达的对象，将被存入Old代内存区。Old代需要的空间更大，并且由于Old代的对象一般存活的时间很长，不需要多次执行回收，所以其一般采用标记压缩（mark-sweep-compact）的回收算法。具体来讲就是，当这部分空间快要占满时，将Old代的可达对像逐个进行标记，将不可达的对象回收，然后将可达的对象空间进行压缩，等有新的对象存入时，存放在空间的尾端。<br>3.Permanent代空间用于装载Class、Method的信息，默认是64M，通常不会执行回收，除非程序结束，随类的创建而加载。</p>\n<h3 id=\"垃圾回收的相关选项\"><a href=\"#垃圾回收的相关选项\" class=\"headerlink\" title=\"垃圾回收的相关选项\"></a>垃圾回收的相关选项</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Xmx: 堆内存最大容量</div><div class=\"line\">-Xms: 堆初始容量</div><div class=\"line\">-XX:MinHeapFreeRatio=size 堆内存最小空闲百分比</div><div class=\"line\">-XX:MaxHeapFreeRatio=size 堆内存最大空闲百分比</div><div class=\"line\">-XX:NewRatio=size　年轻代和年老代内存空间比</div><div class=\"line\">-XX:NewSize=size　年轻代内存默认容量</div><div class=\"line\">-XX:SurvivorRatio=size　Eden和Survivor空间的比例</div><div class=\"line\">-XX:MaxNewSize=size　年轻代最大容量</div><div class=\"line\">-XX:PermSize=size　持久代默认容量</div><div class=\"line\">-XX:MaxPermSize=size　持久代最大容量</div></pre></td></tr></table></figure>\n<h3 id=\"回收器\"><a href=\"#回收器\" class=\"headerlink\" title=\"回收器\"></a>回收器</h3><p>1.串行回收器(Serial Collector)开辟一个单线程来进行内存的回收（单核CPU）,而并行回收器开辟多个线程进行回收(多核CPU),并行回收在运行是消耗更大，但是效率更高。在对年老代对象进行的是串行回收，而年轻代的回收则取决于具体服务器的核心数目。<br>配置使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+Use SerialGC 使用串行GC回收器</div><div class=\"line\">-XX:+Use ParallelGC　使用并行GC回收器</div><div class=\"line\">-XX:ParallelGCThreads=size　配置并行GC回收器线程数目</div></pre></td></tr></table></figure></p>\n<p>2.java5.0之后引入并行压缩回收器，年轻代对象处理方式不变，将Old代对象分成了密集区与非密集区分别处理。<br>配置使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+Use ParallelOldGC　使用并行GC</div><div class=\"line\">-XX:ParallelOldGCThreads=size　配置并行GC线程数目</div></pre></td></tr></table></figure></p>\n<p>3.并发标识清理（Mark-Sweep CMS）<br>并行处理GC不会出现程序暂停，而并发处理会引起程序短暂的暂停。由于CMS回收对象不压缩，所以其处理的空间不连续，间接地导致内存分配的效率下降。</p>\n<h3 id=\"内存管理小技巧\"><a href=\"#内存管理小技巧\" class=\"headerlink\" title=\"内存管理小技巧\"></a>内存管理小技巧</h3><p>1.使用String和基本类的包装类时使用直接量，尽量不使用new操作符创建对象；<br>2.使用StringBuilder和StringBuffer来操作字符串的连接操作；<br>3.尽早释放无用的对象（obj=null）；<br>4.尽量少用静态变量；<br>5.避免循环创建对象；<br>6.缓存经常使用的对象，可以利用数据连接池、HashMap等；<br>7.尽量不使用finalize，这样会增加GC的负担；<br>8.可以使用软引用；</p>\n","excerpt":"<p>java中GC涉及到java内存的分配与回收管理。虽然jvm承诺自动回收java的内存，但是java依然会出现内存的泄漏，也就是一些无用的内存无法回收的问题。由于java程序员无法直接控制jvm回收无用内存，即便是调用<code>System.gc()</code>，也只是建议jvm实施垃圾回收，但是具体的回收过程还是无法立即实现。由于盏内存随着方法的结束被回收，而且栈内存大小一般在运行期间就已经确定，所以这里涉及到的主要是堆内存的回收与分配。<br>","more":"</p>\n<h3 id=\"回收机制\"><a href=\"#回收机制\" class=\"headerlink\" title=\"回收机制\"></a>回收机制</h3><p>1.当某个对象处于不可达的状态，也就是没有任何的引用指向该对象，便会准备回收该对象的内存；<br>2.jvm要清理、分配内存，整理回收过程中产生的内存碎片。</p>\n<h3 id=\"垃圾回收的基本算法\"><a href=\"#垃圾回收的基本算法\" class=\"headerlink\" title=\"垃圾回收的基本算法\"></a>垃圾回收的基本算法</h3><p>java虚拟机在执行垃圾回收时，会判断每个对象所处的状态，依据其存在时间的长短，将其分为Young、Old、Permanent，对不同代的对象执行的回收算法也不相一致。<br>1.绝大多数的对象不会被长时间的引用，这些对象在年轻代就被回收。针对年轻代的对象，虚拟机会开辟一个Eden区和两个Survivor区，其中Eden区存放着绝大多数的年轻对象，有些较大的年轻对象则直接存放到Old代的内存区，而两个Survivor区中有一个区存放对象,这个区中的年轻代的对象至少经历过一次回收，另一个区是空的。对于年轻代的对象采用的是复制算法（copying），具体来讲就是当年轻代所占用的空间快要占满时，判断年轻代中在Eden和Survivor区中可达的对象，将其存放到另一个空的Survivor区中，然后对Eden和Survivor区中的空间进行清理，将它们的内存回收作为新的Eden和Survivor区。默认的Eden和Survivor区的大小的比例为<code>32:1</code>。<br>2.对于年轻代中多次回收任然可达的对象，将被存入Old代内存区。Old代需要的空间更大，并且由于Old代的对象一般存活的时间很长，不需要多次执行回收，所以其一般采用标记压缩（mark-sweep-compact）的回收算法。具体来讲就是，当这部分空间快要占满时，将Old代的可达对像逐个进行标记，将不可达的对象回收，然后将可达的对象空间进行压缩，等有新的对象存入时，存放在空间的尾端。<br>3.Permanent代空间用于装载Class、Method的信息，默认是64M，通常不会执行回收，除非程序结束，随类的创建而加载。</p>\n<h3 id=\"垃圾回收的相关选项\"><a href=\"#垃圾回收的相关选项\" class=\"headerlink\" title=\"垃圾回收的相关选项\"></a>垃圾回收的相关选项</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Xmx: 堆内存最大容量</div><div class=\"line\">-Xms: 堆初始容量</div><div class=\"line\">-XX:MinHeapFreeRatio=size 堆内存最小空闲百分比</div><div class=\"line\">-XX:MaxHeapFreeRatio=size 堆内存最大空闲百分比</div><div class=\"line\">-XX:NewRatio=size　年轻代和年老代内存空间比</div><div class=\"line\">-XX:NewSize=size　年轻代内存默认容量</div><div class=\"line\">-XX:SurvivorRatio=size　Eden和Survivor空间的比例</div><div class=\"line\">-XX:MaxNewSize=size　年轻代最大容量</div><div class=\"line\">-XX:PermSize=size　持久代默认容量</div><div class=\"line\">-XX:MaxPermSize=size　持久代最大容量</div></pre></td></tr></table></figure>\n<h3 id=\"回收器\"><a href=\"#回收器\" class=\"headerlink\" title=\"回收器\"></a>回收器</h3><p>1.串行回收器(Serial Collector)开辟一个单线程来进行内存的回收（单核CPU）,而并行回收器开辟多个线程进行回收(多核CPU),并行回收在运行是消耗更大，但是效率更高。在对年老代对象进行的是串行回收，而年轻代的回收则取决于具体服务器的核心数目。<br>配置使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+Use SerialGC 使用串行GC回收器</div><div class=\"line\">-XX:+Use ParallelGC　使用并行GC回收器</div><div class=\"line\">-XX:ParallelGCThreads=size　配置并行GC回收器线程数目</div></pre></td></tr></table></figure></p>\n<p>2.java5.0之后引入并行压缩回收器，年轻代对象处理方式不变，将Old代对象分成了密集区与非密集区分别处理。<br>配置使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-XX:+Use ParallelOldGC　使用并行GC</div><div class=\"line\">-XX:ParallelOldGCThreads=size　配置并行GC线程数目</div></pre></td></tr></table></figure></p>\n<p>3.并发标识清理（Mark-Sweep CMS）<br>并行处理GC不会出现程序暂停，而并发处理会引起程序短暂的暂停。由于CMS回收对象不压缩，所以其处理的空间不连续，间接地导致内存分配的效率下降。</p>\n<h3 id=\"内存管理小技巧\"><a href=\"#内存管理小技巧\" class=\"headerlink\" title=\"内存管理小技巧\"></a>内存管理小技巧</h3><p>1.使用String和基本类的包装类时使用直接量，尽量不使用new操作符创建对象；<br>2.使用StringBuilder和StringBuffer来操作字符串的连接操作；<br>3.尽早释放无用的对象（obj=null）；<br>4.尽量少用静态变量；<br>5.避免循环创建对象；<br>6.缓存经常使用的对象，可以利用数据连接池、HashMap等；<br>7.尽量不使用finalize，这样会增加GC的负担；<br>8.可以使用软引用；</p>"},{"title":"ln命令","date":"2016-10-28T08:46:24.000Z","_content":"### ln命令用来创建链接\n* 创建硬链接\n`ln file link`\n硬链接是unix最初的链接方式，一个硬链接和一个文件没有什么区别，当你修改硬链接对应的文件时，该硬链接也会同时被修改。硬链接的使用有两个限制：只能为一个文件创建硬链接;必须关联同一个磁盘上的文件。当所有关联这个文件的硬链接消失的时候，该文件占用的空间会被重新分配。\n\n*  创建软链接\n`ln -s item link`\nitem可以为一个文件亦可以为一个文件夹。软链接类似于快捷方式。当一个文件被删除，而指向其的软链接如果没有被删除的话，就会变成一个坏链接。同时修改一个符号链接，也会使源文件内容发生改变。","source":"_posts/ln.md","raw":"---\ntitle: ln命令\ndate: 2016-10-28 16:46:24\ntags: linux\ncategories: 一天一个linux命令\n---\n### ln命令用来创建链接\n* 创建硬链接\n`ln file link`\n硬链接是unix最初的链接方式，一个硬链接和一个文件没有什么区别，当你修改硬链接对应的文件时，该硬链接也会同时被修改。硬链接的使用有两个限制：只能为一个文件创建硬链接;必须关联同一个磁盘上的文件。当所有关联这个文件的硬链接消失的时候，该文件占用的空间会被重新分配。\n\n*  创建软链接\n`ln -s item link`\nitem可以为一个文件亦可以为一个文件夹。软链接类似于快捷方式。当一个文件被删除，而指向其的软链接如果没有被删除的话，就会变成一个坏链接。同时修改一个符号链接，也会使源文件内容发生改变。","slug":"ln","published":1,"updated":"2016-10-28T09:11:31.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz93000ubakzlstlarry","content":"<h3 id=\"ln命令用来创建链接\"><a href=\"#ln命令用来创建链接\" class=\"headerlink\" title=\"ln命令用来创建链接\"></a>ln命令用来创建链接</h3><ul>\n<li><p>创建硬链接<br><code>ln file link</code><br>硬链接是unix最初的链接方式，一个硬链接和一个文件没有什么区别，当你修改硬链接对应的文件时，该硬链接也会同时被修改。硬链接的使用有两个限制：只能为一个文件创建硬链接;必须关联同一个磁盘上的文件。当所有关联这个文件的硬链接消失的时候，该文件占用的空间会被重新分配。</p>\n</li>\n<li><p>创建软链接<br><code>ln -s item link</code><br>item可以为一个文件亦可以为一个文件夹。软链接类似于快捷方式。当一个文件被删除，而指向其的软链接如果没有被删除的话，就会变成一个坏链接。同时修改一个符号链接，也会使源文件内容发生改变。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"ln命令用来创建链接\"><a href=\"#ln命令用来创建链接\" class=\"headerlink\" title=\"ln命令用来创建链接\"></a>ln命令用来创建链接</h3><ul>\n<li><p>创建硬链接<br><code>ln file link</code><br>硬链接是unix最初的链接方式，一个硬链接和一个文件没有什么区别，当你修改硬链接对应的文件时，该硬链接也会同时被修改。硬链接的使用有两个限制：只能为一个文件创建硬链接;必须关联同一个磁盘上的文件。当所有关联这个文件的硬链接消失的时候，该文件占用的空间会被重新分配。</p>\n</li>\n<li><p>创建软链接<br><code>ln -s item link</code><br>item可以为一个文件亦可以为一个文件夹。软链接类似于快捷方式。当一个文件被删除，而指向其的软链接如果没有被删除的话，就会变成一个坏链接。同时修改一个符号链接，也会使源文件内容发生改变。</p>\n</li>\n</ul>\n"},{"title":"多线程","date":"2016-11-21T15:28:02.000Z","_content":"*以下时java多线程学习的一些笔记和心得。*\n### 进程和线程\n>**进程**一般作为资源的组织单位。有自己独立的地址空间，包含程序内容和数据，不同的进程的地址空间时相互隔离的。进程拥有各种资源和状态信息，包括打开的子进程、文件和信号处理器。**线程**表示的是程序的执行流程，是CPU调度的基本单位，有自己的程序计数器、寄存器、堆和栈等。同一个进程中的线程共用进程的地址空间，同时共享进程拥有的内存和其它资源。\n\n### 引入多线程的目的\n引入线程的目的是为了解决效率问题，避免因为阻塞或者其它而导致的CPU性能无法充分利用的问题。一般影响线程执行效率的是在使用CPU和进行IO操作的时候。\n### 实现多线程的基本方式\n**继承Thread类**\n`class MyThread extends Thread{public void run(){code}}`\n或者**实现Runnable接口**，然后将实现了Runnable接口的对象作为参数传入Thread中构建一个Thread实例\n`class MyRunnable implements Runnable{public void run(){code}}`\n`Thread thread = new Thread(new MyRunnable);`\n然后我们可以调用Thread实例的**start()**方法，就可以启动一个线程。\n### 多线程引发的问题\n#### 可见性\n>在多线程程序中，当一个线程对共享变量所做的修改对于其它线程并不可见，导致其它的线程人然使用错误的值，就会造成可见性问题。在代码被运行时，对于一条代码语句，可能对应着虚拟机中多条的指令序列，由于CPU在调用线程时不可预知，那么就可能出现在执行某一条语句时，执行到其所对应的指令的间隙就切换到了其它线程执行，引发错误。\n>还有一种情况是和CPU相关的，现在的CPU一般采用**多级缓存**，多级缓存的引入是为了提高读取效率，增加CPU运算的性能，但是这样也会引发一些问题：由于线程在读取数据的时候是从主存时读取的，当一个线程对一个共享变量进行了修改的时候，这个变量没有及时地写入到主存中，而是暂时保存在了缓存中，那么CPU此时切换另一个线程运行时，读取到的时主存的原来的值。\n>另一个可能的原因是编译器出于对性能的考虑，可能会对生成的字节吗进行**指令重排**，优化指令的执行顺序，这也可能会引发多线程可见性问题。","source":"_posts/multithread.md","raw":"---\ntitle: 多线程\ndate: 2016-11-21 23:28:02\ntags: 多线程\ncategories: JavaSE\n---\n*以下时java多线程学习的一些笔记和心得。*\n### 进程和线程\n>**进程**一般作为资源的组织单位。有自己独立的地址空间，包含程序内容和数据，不同的进程的地址空间时相互隔离的。进程拥有各种资源和状态信息，包括打开的子进程、文件和信号处理器。**线程**表示的是程序的执行流程，是CPU调度的基本单位，有自己的程序计数器、寄存器、堆和栈等。同一个进程中的线程共用进程的地址空间，同时共享进程拥有的内存和其它资源。\n\n### 引入多线程的目的\n引入线程的目的是为了解决效率问题，避免因为阻塞或者其它而导致的CPU性能无法充分利用的问题。一般影响线程执行效率的是在使用CPU和进行IO操作的时候。\n### 实现多线程的基本方式\n**继承Thread类**\n`class MyThread extends Thread{public void run(){code}}`\n或者**实现Runnable接口**，然后将实现了Runnable接口的对象作为参数传入Thread中构建一个Thread实例\n`class MyRunnable implements Runnable{public void run(){code}}`\n`Thread thread = new Thread(new MyRunnable);`\n然后我们可以调用Thread实例的**start()**方法，就可以启动一个线程。\n### 多线程引发的问题\n#### 可见性\n>在多线程程序中，当一个线程对共享变量所做的修改对于其它线程并不可见，导致其它的线程人然使用错误的值，就会造成可见性问题。在代码被运行时，对于一条代码语句，可能对应着虚拟机中多条的指令序列，由于CPU在调用线程时不可预知，那么就可能出现在执行某一条语句时，执行到其所对应的指令的间隙就切换到了其它线程执行，引发错误。\n>还有一种情况是和CPU相关的，现在的CPU一般采用**多级缓存**，多级缓存的引入是为了提高读取效率，增加CPU运算的性能，但是这样也会引发一些问题：由于线程在读取数据的时候是从主存时读取的，当一个线程对一个共享变量进行了修改的时候，这个变量没有及时地写入到主存中，而是暂时保存在了缓存中，那么CPU此时切换另一个线程运行时，读取到的时主存的原来的值。\n>另一个可能的原因是编译器出于对性能的考虑，可能会对生成的字节吗进行**指令重排**，优化指令的执行顺序，这也可能会引发多线程可见性问题。","slug":"multithread","published":1,"updated":"2016-11-21T15:32:40.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz96000xbakza922xprq","content":"<p><em>以下时java多线程学习的一些笔记和心得。</em></p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><blockquote>\n<p><strong>进程</strong>一般作为资源的组织单位。有自己独立的地址空间，包含程序内容和数据，不同的进程的地址空间时相互隔离的。进程拥有各种资源和状态信息，包括打开的子进程、文件和信号处理器。<strong>线程</strong>表示的是程序的执行流程，是CPU调度的基本单位，有自己的程序计数器、寄存器、堆和栈等。同一个进程中的线程共用进程的地址空间，同时共享进程拥有的内存和其它资源。</p>\n</blockquote>\n<h3 id=\"引入多线程的目的\"><a href=\"#引入多线程的目的\" class=\"headerlink\" title=\"引入多线程的目的\"></a>引入多线程的目的</h3><p>引入线程的目的是为了解决效率问题，避免因为阻塞或者其它而导致的CPU性能无法充分利用的问题。一般影响线程执行效率的是在使用CPU和进行IO操作的时候。</p>\n<h3 id=\"实现多线程的基本方式\"><a href=\"#实现多线程的基本方式\" class=\"headerlink\" title=\"实现多线程的基本方式\"></a>实现多线程的基本方式</h3><p><strong>继承Thread类</strong><br><code>class MyThread extends Thread{public void run(){code}}</code><br>或者<strong>实现Runnable接口</strong>，然后将实现了Runnable接口的对象作为参数传入Thread中构建一个Thread实例<br><code>class MyRunnable implements Runnable{public void run(){code}}</code><br><code>Thread thread = new Thread(new MyRunnable);</code><br>然后我们可以调用Thread实例的<strong>start()</strong>方法，就可以启动一个线程。</p>\n<h3 id=\"多线程引发的问题\"><a href=\"#多线程引发的问题\" class=\"headerlink\" title=\"多线程引发的问题\"></a>多线程引发的问题</h3><h4 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h4><blockquote>\n<p>在多线程程序中，当一个线程对共享变量所做的修改对于其它线程并不可见，导致其它的线程人然使用错误的值，就会造成可见性问题。在代码被运行时，对于一条代码语句，可能对应着虚拟机中多条的指令序列，由于CPU在调用线程时不可预知，那么就可能出现在执行某一条语句时，执行到其所对应的指令的间隙就切换到了其它线程执行，引发错误。<br>还有一种情况是和CPU相关的，现在的CPU一般采用<strong>多级缓存</strong>，多级缓存的引入是为了提高读取效率，增加CPU运算的性能，但是这样也会引发一些问题：由于线程在读取数据的时候是从主存时读取的，当一个线程对一个共享变量进行了修改的时候，这个变量没有及时地写入到主存中，而是暂时保存在了缓存中，那么CPU此时切换另一个线程运行时，读取到的时主存的原来的值。<br>另一个可能的原因是编译器出于对性能的考虑，可能会对生成的字节吗进行<strong>指令重排</strong>，优化指令的执行顺序，这也可能会引发多线程可见性问题。</p>\n</blockquote>\n","excerpt":"","more":"<p><em>以下时java多线程学习的一些笔记和心得。</em></p>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><blockquote>\n<p><strong>进程</strong>一般作为资源的组织单位。有自己独立的地址空间，包含程序内容和数据，不同的进程的地址空间时相互隔离的。进程拥有各种资源和状态信息，包括打开的子进程、文件和信号处理器。<strong>线程</strong>表示的是程序的执行流程，是CPU调度的基本单位，有自己的程序计数器、寄存器、堆和栈等。同一个进程中的线程共用进程的地址空间，同时共享进程拥有的内存和其它资源。</p>\n</blockquote>\n<h3 id=\"引入多线程的目的\"><a href=\"#引入多线程的目的\" class=\"headerlink\" title=\"引入多线程的目的\"></a>引入多线程的目的</h3><p>引入线程的目的是为了解决效率问题，避免因为阻塞或者其它而导致的CPU性能无法充分利用的问题。一般影响线程执行效率的是在使用CPU和进行IO操作的时候。</p>\n<h3 id=\"实现多线程的基本方式\"><a href=\"#实现多线程的基本方式\" class=\"headerlink\" title=\"实现多线程的基本方式\"></a>实现多线程的基本方式</h3><p><strong>继承Thread类</strong><br><code>class MyThread extends Thread{public void run(){code}}</code><br>或者<strong>实现Runnable接口</strong>，然后将实现了Runnable接口的对象作为参数传入Thread中构建一个Thread实例<br><code>class MyRunnable implements Runnable{public void run(){code}}</code><br><code>Thread thread = new Thread(new MyRunnable);</code><br>然后我们可以调用Thread实例的<strong>start()</strong>方法，就可以启动一个线程。</p>\n<h3 id=\"多线程引发的问题\"><a href=\"#多线程引发的问题\" class=\"headerlink\" title=\"多线程引发的问题\"></a>多线程引发的问题</h3><h4 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h4><blockquote>\n<p>在多线程程序中，当一个线程对共享变量所做的修改对于其它线程并不可见，导致其它的线程人然使用错误的值，就会造成可见性问题。在代码被运行时，对于一条代码语句，可能对应着虚拟机中多条的指令序列，由于CPU在调用线程时不可预知，那么就可能出现在执行某一条语句时，执行到其所对应的指令的间隙就切换到了其它线程执行，引发错误。<br>还有一种情况是和CPU相关的，现在的CPU一般采用<strong>多级缓存</strong>，多级缓存的引入是为了提高读取效率，增加CPU运算的性能，但是这样也会引发一些问题：由于线程在读取数据的时候是从主存时读取的，当一个线程对一个共享变量进行了修改的时候，这个变量没有及时地写入到主存中，而是暂时保存在了缓存中，那么CPU此时切换另一个线程运行时，读取到的时主存的原来的值。<br>另一个可能的原因是编译器出于对性能的考虑，可能会对生成的字节吗进行<strong>指令重排</strong>，优化指令的执行顺序，这也可能会引发多线程可见性问题。</p>\n</blockquote>\n"},{"title":"读小王子","date":"2016-10-04T03:04:28.000Z","_content":"最近在读小王子，断断续续，很早以前就翻看，但是最近才觉得可以好好的欣赏这像童话一般的文字。有人说“孤独时看小王子”，或许最近的日子多彩却孤单。\n<!--more-->\n以下是书摘：\n> “勇往直前，谁也走不出多远的……”\n> \"忘记朋友是悲哀的。并不是所有人都有过朋友的。\"\n> \"我的朋友，从来也不加以解释的。他也许认为我跟他一样的。可是，很不幸，我却不能透过盒子见绵羊。我大概有点像大人了。我总得长大的啊。\"\n> \"若有人爱上了开在亿万星星上的一株花，那么看着星星就足以使他感到幸福。\"\n> “对我来说，你还只是个小男孩，和千千万万小男孩都一样。我不需要你。你也不需要我。对你来说，我也不过是只狐狸，和千千万万狐狸都一样。但是，如果你驯养了我，我们就互相需要了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了……”\n\n读着这些文字，莫名感到悲伤。","source":"_posts/readLittlePrince.md","raw":"---\ntitle: 读小王子\ndate: 2016-10-04 11:04:28\ntags: reading books\n---\n最近在读小王子，断断续续，很早以前就翻看，但是最近才觉得可以好好的欣赏这像童话一般的文字。有人说“孤独时看小王子”，或许最近的日子多彩却孤单。\n<!--more-->\n以下是书摘：\n> “勇往直前，谁也走不出多远的……”\n> \"忘记朋友是悲哀的。并不是所有人都有过朋友的。\"\n> \"我的朋友，从来也不加以解释的。他也许认为我跟他一样的。可是，很不幸，我却不能透过盒子见绵羊。我大概有点像大人了。我总得长大的啊。\"\n> \"若有人爱上了开在亿万星星上的一株花，那么看着星星就足以使他感到幸福。\"\n> “对我来说，你还只是个小男孩，和千千万万小男孩都一样。我不需要你。你也不需要我。对你来说，我也不过是只狐狸，和千千万万狐狸都一样。但是，如果你驯养了我，我们就互相需要了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了……”\n\n读着这些文字，莫名感到悲伤。","slug":"readLittlePrince","published":1,"updated":"2016-10-23T02:38:42.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz9g0011bakzspa6wfsy","content":"<p>最近在读小王子，断断续续，很早以前就翻看，但是最近才觉得可以好好的欣赏这像童话一般的文字。有人说“孤独时看小王子”，或许最近的日子多彩却孤单。<br><a id=\"more\"></a><br>以下是书摘：</p>\n<blockquote>\n<p>“勇往直前，谁也走不出多远的……”<br>“忘记朋友是悲哀的。并不是所有人都有过朋友的。”<br>“我的朋友，从来也不加以解释的。他也许认为我跟他一样的。可是，很不幸，我却不能透过盒子见绵羊。我大概有点像大人了。我总得长大的啊。”<br>“若有人爱上了开在亿万星星上的一株花，那么看着星星就足以使他感到幸福。”<br>“对我来说，你还只是个小男孩，和千千万万小男孩都一样。我不需要你。你也不需要我。对你来说，我也不过是只狐狸，和千千万万狐狸都一样。但是，如果你驯养了我，我们就互相需要了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了……”</p>\n</blockquote>\n<p>读着这些文字，莫名感到悲伤。</p>\n","excerpt":"<p>最近在读小王子，断断续续，很早以前就翻看，但是最近才觉得可以好好的欣赏这像童话一般的文字。有人说“孤独时看小王子”，或许最近的日子多彩却孤单。<br>","more":"<br>以下是书摘：</p>\n<blockquote>\n<p>“勇往直前，谁也走不出多远的……”<br>“忘记朋友是悲哀的。并不是所有人都有过朋友的。”<br>“我的朋友，从来也不加以解释的。他也许认为我跟他一样的。可是，很不幸，我却不能透过盒子见绵羊。我大概有点像大人了。我总得长大的啊。”<br>“若有人爱上了开在亿万星星上的一株花，那么看着星星就足以使他感到幸福。”<br>“对我来说，你还只是个小男孩，和千千万万小男孩都一样。我不需要你。你也不需要我。对你来说，我也不过是只狐狸，和千千万万狐狸都一样。但是，如果你驯养了我，我们就互相需要了。对我来说，你就是世界上唯一的了；我对你来说，也是世界上唯一的了……”</p>\n</blockquote>\n<p>读着这些文字，莫名感到悲伤。</p>"},{"title":"牛客网Java试题纠错总结","date":"2016-11-25T07:06:10.000Z","_content":"在牛客网上断断续续的刷JAVA的专项练习，最近刚好刷完，感觉不过瘾，所以将之前收集的一些的试题整理一下，加强记忆。\n1.有关类方法的描述()：\n* 在类方法中可用this来调用本类的类方法 F\n* 在类方法中调用本类的类方法时可直接调用 T\n* 在类方法中只能调用本类中的类方法 F\n* 在类方法中绝对不能调用实例方法 F\n<!--more-->\n类方法是指static修饰的方法，属于类本身，不可以使用this来引用，this指的是当前正在使用的这个对象；在类方法中可以使用其它类的类方法，使用类名.静态方法名即可；想在类方法中调用实例方法需要在类方法中先实例化一个对象，才可以调用。\n2.下列说法正确的有()：\n* 环境变量可在编译source code时指定 T\n* 在编译程序时，所能指定的环境变量不包括class path F\n* javac一次可同时编译数个Java源文件 T\n* javac.exe能指定编译结果要置于哪个目录（directory）T\n\na选项-d即可设置系统属性;c选项一次编译多个java文件用javac *.java. 即可编译当前目录下的所有java文件;d选项－s指定存放生成的源文件的位置；在编译java文件的时候必须指定类的路径。\n3.下列程序的结果是：\n```java\npublic class Test{\n\tpublic static void changeStr(String str)\n     {\n         str = \"welcome\";\n     }\n     public static void main(String[] args)\n     {\n         String str = \"1234\";\n         changeStr(str);\n         System.out.println(str);\n     }\n}```\n输出的结果是str值为1234.\n字符串在编译过程中，1234和welcome都被编译到了方法区常量池中，在调用changeStr(str)的过程中，首先将str的引用传递给了changeStr(保存在在栈里，对str的引用进行了一次复制，二者都指向'1234'），然后在这里面更改str的值，相当于在栈中将传递给changeStr的引用的值变化了，但是当changeStr结束之后，栈就清空了，因此原来的引用并没有发生变化。这是JAVA值传递的特点决定的，并没有引用传递。\n4.能被java.exe成功运行的java class文件必须有main()方法 T\n不包含main方法的JAVA程序可以被编译，但是要想使用java.exe直接执行一个java字节码文件，该类必须有一个main方法，即程序的入口。否则会发生：\n```java\n$java Hello \n错误: 在类 Hello 中找不到 main 方法, 请将 main 方法定义为:\n   public static void main(String[] args)\n否则 JavaFX 应用程序类必须扩展javafx.application.Application\n```\n5.假定str0,...,str4后序代码都是只读引用。Java 7中，以上述代码为基础，在发生过一次FullGC后，上述代码在Heap空间（不包括PermGen）保留的字符数为（）\n```java\nstatic String str0=\"0123456789\";\nstatic String str1=\"0123456789\";\nString str2=str1.substring(5);\nString str3=new String(str2);\nString str4=new String(str3.toCharArray());\nstr0=null;\n```\n保留的字符书为15，‘0123456789’为字符串常量，保存在方法区常量池中，属于持久代对象（PermGen）。其它的像substring实际是new，5字符str3和4也都是new，每个5字符，分别都会创建新的对象，总共15个字符。（存疑？）\n6.关于JAVA的垃圾回收机制，下面哪些结论是正确？\n* 程序可以任意指定释放内存的时间 F\n* JAVA程序不能依赖于垃圾回收的时间或者顺序 T\n* 程序可明确地标识某个局部变量的引用不再被使用 F\n* 程序可以显式地立即释放对象占有的内存 F\n\njava提供了一个系统级的线程，即垃圾回收器线程。用来对每一个分配出去的内存空间进行跟踪。当JVM空闲时，自动回收每块可能被回收的内存，GC是完全自动的，不能被强制执行。程序员最多只能用System.gc()来建议执行垃圾回收器回收内存，但是具体的回收时间，是不可知的。对于局部变量可以直接让其引用指向null，其实局部变量被保存在栈中，随着方法的结束就会自动被回收。\n7.下面程序执行的结果：\n```java\npublic class Test\n{\n    public static void main(String[] args)\n    {\n        int x = 0;\n        int y = 0;\n        int k = 0;\n        for (int z = 0; z < 5; z++) {\n            if ((++x > 2) && (++y > 2) && (k++ > 2))\n            {\n                x++;\n                ++y;\n                k++;\n            }\n        }\n        //每一次循环xyk的值依次为 100->200->310->420->531,if判断块内的内容并没执行 \n        System.out.println(x + ”” +y + ”” +k);//结果为531\n    }\n}\n```\n这里涉及到&&符号的短路作用，以及自增的特点。\n8.Math.cos为计算弧度的余弦值，Math.toRadians函数讲角度转换为弧度。\n9.suspend() 和 resume() 方法：两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的 resume() 被调用，才能使得线程重新进入可执行状态。\n10.判断对错。在java的多态调用中，new的是哪一个类就是调用的哪个类的方法。 F\njava多态有两种情况：重载和覆写。在覆写中，运用的是动态单分配，是根据new的类型确定对象，从而确定调用的方法，而且当调用子类中包含而父类并不存在的方法时，就不能多态引用子类对象`Foo f = new Sub();`，对于父子类中都有的方法和域，上面的多态引用，引用方法则是引用子类的方法，而引用域则引用父类的域；在重载中，运用的是静态多分派，即根据静态类型确定对象，因此不是根据new的类型确定调用的方法。\n","source":"_posts/newcodetest.md","raw":"---\ntitle: 牛客网Java试题纠错总结\ndate: 2016-11-25 15:06:10\ntags: 面试\ncategories: JavaSE\n---\n在牛客网上断断续续的刷JAVA的专项练习，最近刚好刷完，感觉不过瘾，所以将之前收集的一些的试题整理一下，加强记忆。\n1.有关类方法的描述()：\n* 在类方法中可用this来调用本类的类方法 F\n* 在类方法中调用本类的类方法时可直接调用 T\n* 在类方法中只能调用本类中的类方法 F\n* 在类方法中绝对不能调用实例方法 F\n<!--more-->\n类方法是指static修饰的方法，属于类本身，不可以使用this来引用，this指的是当前正在使用的这个对象；在类方法中可以使用其它类的类方法，使用类名.静态方法名即可；想在类方法中调用实例方法需要在类方法中先实例化一个对象，才可以调用。\n2.下列说法正确的有()：\n* 环境变量可在编译source code时指定 T\n* 在编译程序时，所能指定的环境变量不包括class path F\n* javac一次可同时编译数个Java源文件 T\n* javac.exe能指定编译结果要置于哪个目录（directory）T\n\na选项-d即可设置系统属性;c选项一次编译多个java文件用javac *.java. 即可编译当前目录下的所有java文件;d选项－s指定存放生成的源文件的位置；在编译java文件的时候必须指定类的路径。\n3.下列程序的结果是：\n```java\npublic class Test{\n\tpublic static void changeStr(String str)\n     {\n         str = \"welcome\";\n     }\n     public static void main(String[] args)\n     {\n         String str = \"1234\";\n         changeStr(str);\n         System.out.println(str);\n     }\n}```\n输出的结果是str值为1234.\n字符串在编译过程中，1234和welcome都被编译到了方法区常量池中，在调用changeStr(str)的过程中，首先将str的引用传递给了changeStr(保存在在栈里，对str的引用进行了一次复制，二者都指向'1234'），然后在这里面更改str的值，相当于在栈中将传递给changeStr的引用的值变化了，但是当changeStr结束之后，栈就清空了，因此原来的引用并没有发生变化。这是JAVA值传递的特点决定的，并没有引用传递。\n4.能被java.exe成功运行的java class文件必须有main()方法 T\n不包含main方法的JAVA程序可以被编译，但是要想使用java.exe直接执行一个java字节码文件，该类必须有一个main方法，即程序的入口。否则会发生：\n```java\n$java Hello \n错误: 在类 Hello 中找不到 main 方法, 请将 main 方法定义为:\n   public static void main(String[] args)\n否则 JavaFX 应用程序类必须扩展javafx.application.Application\n```\n5.假定str0,...,str4后序代码都是只读引用。Java 7中，以上述代码为基础，在发生过一次FullGC后，上述代码在Heap空间（不包括PermGen）保留的字符数为（）\n```java\nstatic String str0=\"0123456789\";\nstatic String str1=\"0123456789\";\nString str2=str1.substring(5);\nString str3=new String(str2);\nString str4=new String(str3.toCharArray());\nstr0=null;\n```\n保留的字符书为15，‘0123456789’为字符串常量，保存在方法区常量池中，属于持久代对象（PermGen）。其它的像substring实际是new，5字符str3和4也都是new，每个5字符，分别都会创建新的对象，总共15个字符。（存疑？）\n6.关于JAVA的垃圾回收机制，下面哪些结论是正确？\n* 程序可以任意指定释放内存的时间 F\n* JAVA程序不能依赖于垃圾回收的时间或者顺序 T\n* 程序可明确地标识某个局部变量的引用不再被使用 F\n* 程序可以显式地立即释放对象占有的内存 F\n\njava提供了一个系统级的线程，即垃圾回收器线程。用来对每一个分配出去的内存空间进行跟踪。当JVM空闲时，自动回收每块可能被回收的内存，GC是完全自动的，不能被强制执行。程序员最多只能用System.gc()来建议执行垃圾回收器回收内存，但是具体的回收时间，是不可知的。对于局部变量可以直接让其引用指向null，其实局部变量被保存在栈中，随着方法的结束就会自动被回收。\n7.下面程序执行的结果：\n```java\npublic class Test\n{\n    public static void main(String[] args)\n    {\n        int x = 0;\n        int y = 0;\n        int k = 0;\n        for (int z = 0; z < 5; z++) {\n            if ((++x > 2) && (++y > 2) && (k++ > 2))\n            {\n                x++;\n                ++y;\n                k++;\n            }\n        }\n        //每一次循环xyk的值依次为 100->200->310->420->531,if判断块内的内容并没执行 \n        System.out.println(x + ”” +y + ”” +k);//结果为531\n    }\n}\n```\n这里涉及到&&符号的短路作用，以及自增的特点。\n8.Math.cos为计算弧度的余弦值，Math.toRadians函数讲角度转换为弧度。\n9.suspend() 和 resume() 方法：两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的 resume() 被调用，才能使得线程重新进入可执行状态。\n10.判断对错。在java的多态调用中，new的是哪一个类就是调用的哪个类的方法。 F\njava多态有两种情况：重载和覆写。在覆写中，运用的是动态单分配，是根据new的类型确定对象，从而确定调用的方法，而且当调用子类中包含而父类并不存在的方法时，就不能多态引用子类对象`Foo f = new Sub();`，对于父子类中都有的方法和域，上面的多态引用，引用方法则是引用子类的方法，而引用域则引用父类的域；在重载中，运用的是静态多分派，即根据静态类型确定对象，因此不是根据new的类型确定调用的方法。\n","slug":"newcodetest","published":1,"updated":"2016-11-25T08:10:10.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz9j0015bakz32y0iefg","content":"<p>在牛客网上断断续续的刷JAVA的专项练习，最近刚好刷完，感觉不过瘾，所以将之前收集的一些的试题整理一下，加强记忆。<br>1.有关类方法的描述()：</p>\n<ul>\n<li>在类方法中可用this来调用本类的类方法 F</li>\n<li>在类方法中调用本类的类方法时可直接调用 T</li>\n<li>在类方法中只能调用本类中的类方法 F</li>\n<li>在类方法中绝对不能调用实例方法 F<a id=\"more\"></a>\n类方法是指static修饰的方法，属于类本身，不可以使用this来引用，this指的是当前正在使用的这个对象；在类方法中可以使用其它类的类方法，使用类名.静态方法名即可；想在类方法中调用实例方法需要在类方法中先实例化一个对象，才可以调用。<br>2.下列说法正确的有()：</li>\n<li>环境变量可在编译source code时指定 T</li>\n<li>在编译程序时，所能指定的环境变量不包括class path F</li>\n<li>javac一次可同时编译数个Java源文件 T</li>\n<li>javac.exe能指定编译结果要置于哪个目录（directory）T</li>\n</ul>\n<p>a选项-d即可设置系统属性;c选项一次编译多个java文件用javac *.java. 即可编译当前目录下的所有java文件;d选项－s指定存放生成的源文件的位置；在编译java文件的时候必须指定类的路径。<br>3.下列程序的结果是：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeStr</span><span class=\"params\">(String str)</span></span></div><div class=\"line\">     &#123;</div><div class=\"line\">         str = <span class=\"string\">\"welcome\"</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></div><div class=\"line\">     &#123;</div><div class=\"line\">         String str = <span class=\"string\">\"1234\"</span>;</div><div class=\"line\">         changeStr(str);</div><div class=\"line\">         System.out.println(str);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出的结果是str值为1234.<br>字符串在编译过程中，1234和welcome都被编译到了方法区常量池中，在调用changeStr(str)的过程中，首先将str的引用传递给了changeStr(保存在在栈里，对str的引用进行了一次复制，二者都指向’1234’），然后在这里面更改str的值，相当于在栈中将传递给changeStr的引用的值变化了，但是当changeStr结束之后，栈就清空了，因此原来的引用并没有发生变化。这是JAVA值传递的特点决定的，并没有引用传递。<br>4.能被java.exe成功运行的java class文件必须有main()方法 T<br>不包含main方法的JAVA程序可以被编译，但是要想使用java.exe直接执行一个java字节码文件，该类必须有一个main方法，即程序的入口。否则会发生：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$java Hello </div><div class=\"line\">错误: 在类 Hello 中找不到 main 方法, 请将 main 方法定义为:</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></div><div class=\"line\">否则 JavaFX 应用程序类必须扩展javafx.application.Application</div></pre></td></tr></table></figure></p>\n<p>5.假定str0,…,str4后序代码都是只读引用。Java 7中，以上述代码为基础，在发生过一次FullGC后，上述代码在Heap空间（不包括PermGen）保留的字符数为（）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> String str0=<span class=\"string\">\"0123456789\"</span>;</div><div class=\"line\"><span class=\"keyword\">static</span> String str1=<span class=\"string\">\"0123456789\"</span>;</div><div class=\"line\">String str2=str1.substring(<span class=\"number\">5</span>);</div><div class=\"line\">String str3=<span class=\"keyword\">new</span> String(str2);</div><div class=\"line\">String str4=<span class=\"keyword\">new</span> String(str3.toCharArray());</div><div class=\"line\">str0=<span class=\"keyword\">null</span>;</div></pre></td></tr></table></figure></p>\n<p>保留的字符书为15，‘0123456789’为字符串常量，保存在方法区常量池中，属于持久代对象（PermGen）。其它的像substring实际是new，5字符str3和4也都是new，每个5字符，分别都会创建新的对象，总共15个字符。（存疑？）<br>6.关于JAVA的垃圾回收机制，下面哪些结论是正确？</p>\n<ul>\n<li>程序可以任意指定释放内存的时间 F</li>\n<li>JAVA程序不能依赖于垃圾回收的时间或者顺序 T</li>\n<li>程序可明确地标识某个局部变量的引用不再被使用 F</li>\n<li>程序可以显式地立即释放对象占有的内存 F</li>\n</ul>\n<p>java提供了一个系统级的线程，即垃圾回收器线程。用来对每一个分配出去的内存空间进行跟踪。当JVM空闲时，自动回收每块可能被回收的内存，GC是完全自动的，不能被强制执行。程序员最多只能用System.gc()来建议执行垃圾回收器回收内存，但是具体的回收时间，是不可知的。对于局部变量可以直接让其引用指向null，其实局部变量被保存在栈中，随着方法的结束就会自动被回收。<br>7.下面程序执行的结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> z = <span class=\"number\">0</span>; z &lt; <span class=\"number\">5</span>; z++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((++x &gt; <span class=\"number\">2</span>) &amp;&amp; (++y &gt; <span class=\"number\">2</span>) &amp;&amp; (k++ &gt; <span class=\"number\">2</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                x++;</div><div class=\"line\">                ++y;</div><div class=\"line\">                k++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//每一次循环xyk的值依次为 100-&gt;200-&gt;310-&gt;420-&gt;531,if判断块内的内容并没执行 </span></div><div class=\"line\">        System.out.println(x + ”” +y + ”” +k);<span class=\"comment\">//结果为531</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里涉及到&amp;&amp;符号的短路作用，以及自增的特点。<br>8.Math.cos为计算弧度的余弦值，Math.toRadians函数讲角度转换为弧度。<br>9.suspend() 和 resume() 方法：两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的 resume() 被调用，才能使得线程重新进入可执行状态。<br>10.判断对错。在java的多态调用中，new的是哪一个类就是调用的哪个类的方法。 F<br>java多态有两种情况：重载和覆写。在覆写中，运用的是动态单分配，是根据new的类型确定对象，从而确定调用的方法，而且当调用子类中包含而父类并不存在的方法时，就不能多态引用子类对象<code>Foo f = new Sub();</code>，对于父子类中都有的方法和域，上面的多态引用，引用方法则是引用子类的方法，而引用域则引用父类的域；在重载中，运用的是静态多分派，即根据静态类型确定对象，因此不是根据new的类型确定调用的方法。</p>\n","excerpt":"<p>在牛客网上断断续续的刷JAVA的专项练习，最近刚好刷完，感觉不过瘾，所以将之前收集的一些的试题整理一下，加强记忆。<br>1.有关类方法的描述()：</p>\n<ul>\n<li>在类方法中可用this来调用本类的类方法 F</li>\n<li>在类方法中调用本类的类方法时可直接调用 T</li>\n<li>在类方法中只能调用本类中的类方法 F</li>\n<li>在类方法中绝对不能调用实例方法 F","more":"类方法是指static修饰的方法，属于类本身，不可以使用this来引用，this指的是当前正在使用的这个对象；在类方法中可以使用其它类的类方法，使用类名.静态方法名即可；想在类方法中调用实例方法需要在类方法中先实例化一个对象，才可以调用。<br>2.下列说法正确的有()：</li>\n<li>环境变量可在编译source code时指定 T</li>\n<li>在编译程序时，所能指定的环境变量不包括class path F</li>\n<li>javac一次可同时编译数个Java源文件 T</li>\n<li>javac.exe能指定编译结果要置于哪个目录（directory）T</li>\n</ul>\n<p>a选项-d即可设置系统属性;c选项一次编译多个java文件用javac *.java. 即可编译当前目录下的所有java文件;d选项－s指定存放生成的源文件的位置；在编译java文件的时候必须指定类的路径。<br>3.下列程序的结果是：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeStr</span><span class=\"params\">(String str)</span></div><div class=\"line\">     </span>&#123;</div><div class=\"line\">         str = <span class=\"string\">\"welcome\"</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></div><div class=\"line\">     </span>&#123;</div><div class=\"line\">         String str = <span class=\"string\">\"1234\"</span>;</div><div class=\"line\">         changeStr(str);</div><div class=\"line\">         System.out.println(str);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出的结果是str值为1234.<br>字符串在编译过程中，1234和welcome都被编译到了方法区常量池中，在调用changeStr(str)的过程中，首先将str的引用传递给了changeStr(保存在在栈里，对str的引用进行了一次复制，二者都指向’1234’），然后在这里面更改str的值，相当于在栈中将传递给changeStr的引用的值变化了，但是当changeStr结束之后，栈就清空了，因此原来的引用并没有发生变化。这是JAVA值传递的特点决定的，并没有引用传递。<br>4.能被java.exe成功运行的java class文件必须有main()方法 T<br>不包含main方法的JAVA程序可以被编译，但是要想使用java.exe直接执行一个java字节码文件，该类必须有一个main方法，即程序的入口。否则会发生：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$java Hello </div><div class=\"line\">错误: 在类 Hello 中找不到 main 方法, 请将 main 方法定义为:</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></div><div class=\"line\">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span></div></pre></td></tr></table></figure></p>\n<p>5.假定str0,…,str4后序代码都是只读引用。Java 7中，以上述代码为基础，在发生过一次FullGC后，上述代码在Heap空间（不包括PermGen）保留的字符数为（）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> String str0=<span class=\"string\">\"0123456789\"</span>;</div><div class=\"line\"><span class=\"keyword\">static</span> String str1=<span class=\"string\">\"0123456789\"</span>;</div><div class=\"line\">String str2=str1.substring(<span class=\"number\">5</span>);</div><div class=\"line\">String str3=<span class=\"keyword\">new</span> String(str2);</div><div class=\"line\">String str4=<span class=\"keyword\">new</span> String(str3.toCharArray());</div><div class=\"line\">str0=<span class=\"keyword\">null</span>;</div></pre></td></tr></table></figure></p>\n<p>保留的字符书为15，‘0123456789’为字符串常量，保存在方法区常量池中，属于持久代对象（PermGen）。其它的像substring实际是new，5字符str3和4也都是new，每个5字符，分别都会创建新的对象，总共15个字符。（存疑？）<br>6.关于JAVA的垃圾回收机制，下面哪些结论是正确？</p>\n<ul>\n<li>程序可以任意指定释放内存的时间 F</li>\n<li>JAVA程序不能依赖于垃圾回收的时间或者顺序 T</li>\n<li>程序可明确地标识某个局部变量的引用不再被使用 F</li>\n<li>程序可以显式地立即释放对象占有的内存 F</li>\n</ul>\n<p>java提供了一个系统级的线程，即垃圾回收器线程。用来对每一个分配出去的内存空间进行跟踪。当JVM空闲时，自动回收每块可能被回收的内存，GC是完全自动的，不能被强制执行。程序员最多只能用System.gc()来建议执行垃圾回收器回收内存，但是具体的回收时间，是不可知的。对于局部变量可以直接让其引用指向null，其实局部变量被保存在栈中，随着方法的结束就会自动被回收。<br>7.下面程序执行的结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> y = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> z = <span class=\"number\">0</span>; z &lt; <span class=\"number\">5</span>; z++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((++x &gt; <span class=\"number\">2</span>) &amp;&amp; (++y &gt; <span class=\"number\">2</span>) &amp;&amp; (k++ &gt; <span class=\"number\">2</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                x++;</div><div class=\"line\">                ++y;</div><div class=\"line\">                k++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//每一次循环xyk的值依次为 100-&gt;200-&gt;310-&gt;420-&gt;531,if判断块内的内容并没执行 </span></div><div class=\"line\">        System.out.println(x + ”” +y + ”” +k);<span class=\"comment\">//结果为531</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里涉及到&amp;&amp;符号的短路作用，以及自增的特点。<br>8.Math.cos为计算弧度的余弦值，Math.toRadians函数讲角度转换为弧度。<br>9.suspend() 和 resume() 方法：两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的 resume() 被调用，才能使得线程重新进入可执行状态。<br>10.判断对错。在java的多态调用中，new的是哪一个类就是调用的哪个类的方法。 F<br>java多态有两种情况：重载和覆写。在覆写中，运用的是动态单分配，是根据new的类型确定对象，从而确定调用的方法，而且当调用子类中包含而父类并不存在的方法时，就不能多态引用子类对象<code>Foo f = new Sub();</code>，对于父子类中都有的方法和域，上面的多态引用，引用方法则是引用子类的方法，而引用域则引用父类的域；在重载中，运用的是静态多分派，即根据静态类型确定对象，因此不是根据new的类型确定调用的方法。</p>"},{"title":"如何得到一个字符串SHA1值","date":"2016-10-15T09:43:06.000Z","_content":"\n今天饶有兴致地想去尝试一下微信公众号的开发，遇到这样一个问题，接入开发模式需要生成一个SHA1的消息摘要。下面是在stack owerflow上看到的实现：\n```java\nString str = \"Hello\";\nMessageDigest md = MessageDigest.getInstance(\"SHA\");//此处可以指定的值为SHA、MD5\nmd.update(str.getBytes());\nbyte[] bs = md.digest();\nBigInteger bigInteger = new BigInteger(1,bs);\nString hashtext = bigInteger.toString(16);\nSystem.out.println(hashtext);\n```","source":"_posts/sha1.md","raw":"---\ntitle: 如何得到一个字符串SHA1值\ndate: 2016-10-15 17:43:06\ntags: sha1\ncategories: JavaSE\n---\n\n今天饶有兴致地想去尝试一下微信公众号的开发，遇到这样一个问题，接入开发模式需要生成一个SHA1的消息摘要。下面是在stack owerflow上看到的实现：\n```java\nString str = \"Hello\";\nMessageDigest md = MessageDigest.getInstance(\"SHA\");//此处可以指定的值为SHA、MD5\nmd.update(str.getBytes());\nbyte[] bs = md.digest();\nBigInteger bigInteger = new BigInteger(1,bs);\nString hashtext = bigInteger.toString(16);\nSystem.out.println(hashtext);\n```","slug":"sha1","published":1,"updated":"2016-10-23T02:38:42.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz9l0017bakzvn1ausnz","content":"<p>今天饶有兴致地想去尝试一下微信公众号的开发，遇到这样一个问题，接入开发模式需要生成一个SHA1的消息摘要。下面是在stack owerflow上看到的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str = <span class=\"string\">\"Hello\"</span>;</div><div class=\"line\">MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"SHA\"</span>);<span class=\"comment\">//此处可以指定的值为SHA、MD5</span></div><div class=\"line\">md.update(str.getBytes());</div><div class=\"line\"><span class=\"keyword\">byte</span>[] bs = md.digest();</div><div class=\"line\">BigInteger bigInteger = <span class=\"keyword\">new</span> BigInteger(<span class=\"number\">1</span>,bs);</div><div class=\"line\">String hashtext = bigInteger.toString(<span class=\"number\">16</span>);</div><div class=\"line\">System.out.println(hashtext);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>今天饶有兴致地想去尝试一下微信公众号的开发，遇到这样一个问题，接入开发模式需要生成一个SHA1的消息摘要。下面是在stack owerflow上看到的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str = <span class=\"string\">\"Hello\"</span>;</div><div class=\"line\">MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"SHA\"</span>);<span class=\"comment\">//此处可以指定的值为SHA、MD5</span></div><div class=\"line\">md.update(str.getBytes());</div><div class=\"line\"><span class=\"keyword\">byte</span>[] bs = md.digest();</div><div class=\"line\">BigInteger bigInteger = <span class=\"keyword\">new</span> BigInteger(<span class=\"number\">1</span>,bs);</div><div class=\"line\">String hashtext = bigInteger.toString(<span class=\"number\">16</span>);</div><div class=\"line\">System.out.println(hashtext);</div></pre></td></tr></table></figure></p>\n"},{"title":"取模","date":"2016-11-01T11:12:07.000Z","_content":"最初开始学习的java时，学到取模`%`，取模的规则感觉学懂了，但是一转眼就会忘记，很多东西都是这么忘了的，而且一到口边再也想不出来是什么。\n```java\npublic void delivery() {\n\tint a = 3, b = 6, c = 7;\n    System.out.println(a % b);\n    System.out.println(b % c);\n    System.out.println(d % a);\n}\n//-3 0 1\n```\n基本规则：\n1.`a < b ==> a % b = a;`对负数也适用。\n2.`a = b ==> a % b = 0;`\n3.`a > b ` `a % b`别告诉我这你不会。","source":"_posts/tips1.md","raw":"---\ntitle: 取模\ndate: 2016-11-01 19:12:07\ntags: tips\ncategories: JavaSE\n---\n最初开始学习的java时，学到取模`%`，取模的规则感觉学懂了，但是一转眼就会忘记，很多东西都是这么忘了的，而且一到口边再也想不出来是什么。\n```java\npublic void delivery() {\n\tint a = 3, b = 6, c = 7;\n    System.out.println(a % b);\n    System.out.println(b % c);\n    System.out.println(d % a);\n}\n//-3 0 1\n```\n基本规则：\n1.`a < b ==> a % b = a;`对负数也适用。\n2.`a = b ==> a % b = 0;`\n3.`a > b ` `a % b`别告诉我这你不会。","slug":"tips1","published":1,"updated":"2016-11-01T11:36:12.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz9o001bbakzrr73odzo","content":"<p>最初开始学习的java时，学到取模<code>%</code>，取模的规则感觉学懂了，但是一转眼就会忘记，很多东西都是这么忘了的，而且一到口边再也想不出来是什么。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delivery</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">6</span>, c = <span class=\"number\">7</span>;</div><div class=\"line\">    System.out.println(a % b);</div><div class=\"line\">    System.out.println(b % c);</div><div class=\"line\">    System.out.println(d % a);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-3 0 1</span></div></pre></td></tr></table></figure></p>\n<p>基本规则：<br>1.<code>a &lt; b ==&gt; a % b = a;</code>对负数也适用。<br>2.<code>a = b ==&gt; a % b = 0;</code><br>3.<code>a &gt; b</code> <code>a % b</code>别告诉我这你不会。</p>\n","excerpt":"","more":"<p>最初开始学习的java时，学到取模<code>%</code>，取模的规则感觉学懂了，但是一转眼就会忘记，很多东西都是这么忘了的，而且一到口边再也想不出来是什么。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delivery</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">3</span>, b = <span class=\"number\">6</span>, c = <span class=\"number\">7</span>;</div><div class=\"line\">    System.out.println(a % b);</div><div class=\"line\">    System.out.println(b % c);</div><div class=\"line\">    System.out.println(d % a);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-3 0 1</span></div></pre></td></tr></table></figure></p>\n<p>基本规则：<br>1.<code>a &lt; b ==&gt; a % b = a;</code>对负数也适用。<br>2.<code>a = b ==&gt; a % b = 0;</code><br>3.<code>a &gt; b</code> <code>a % b</code>别告诉我这你不会。</p>\n"},{"title":"ubuntu下常用java开发环境的配置","date":"2016-10-23T04:14:18.000Z","_content":"在使用ubuntu的时候会遇到各种开发环境的配置，由于ubuntu本身自带的源往往版本要比较陈旧，所以有些环境需要手动配置最新包。\n<!--more-->\n下面是关于java常用的开发环境的配置，在配置下面的这些环境时，请先安装[java](https://ondelete.github.io/2016/10/06/configJavaEnvVar/)：\n**MAVEN**\nmaven是常用项目构建的工具，下面是ubuntu下安装maven开发环境的命令：\n1.去官网下载最新的tar包，然后解压缩到到本地目录\n2.配置maven的环境变量：\n`vim ~/.bashrc`\n`export M2_HOME=mave主目录`\n`export PATH=$PATH:${M2_HOME}/bin`\n`source /etc/profile`\n3.测试：\n`mvn -v`\n**tomcat**\ntomcat是javaweb开发最常用的容器，下面是ubuntu下安装tomcat容器的命令：\n1.去官网下载最新的tar包，然后解压缩到到本地目录\n2.配置tomcat，进入tomcat目录下的bin目录，修改其startup.sh，在其中添加\n`JAVA_HOME=yourjdkdir`\n`JRE_HOME=${JAVA_HOME}/jre`\n`CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib`\n`PATH=${JAVA_HOME}/bin:$PATH`\n`TOMCAT_HOME=yourtomcatdir`\n注意要添加在`exec \"$PRGDIR\"/\"$EXECUTABLE\" start \"$@\"`之前。相应的网shutdownup.sh中也做相同的添加。\n3.修改manager，打开其conf目录下的tomcat-users.xml，在其中添加：\n`<role rolename=\"manager-gui\"/>`\n`<user username=\"yourusername\" password=\"yourpassword\" roles=\"manager-gui\"/>`\n保存相关的修改即可。\n4.启动tomcat\n`./startup.sh`\n当看到设立了shell中出现`tomcat started.`说明配置完成。可以打开浏览器，访问**localhost:8080**，当出现一个猫脸，你的tomcat就配置好了。","source":"_posts/ubuntuEnv.md","raw":"---\ntitle: ubuntu下常用java开发环境的配置\ndate: 2016-10-23 12:14:18\ntags: [maven,tomcat]\ncategories: linux\n---\n在使用ubuntu的时候会遇到各种开发环境的配置，由于ubuntu本身自带的源往往版本要比较陈旧，所以有些环境需要手动配置最新包。\n<!--more-->\n下面是关于java常用的开发环境的配置，在配置下面的这些环境时，请先安装[java](https://ondelete.github.io/2016/10/06/configJavaEnvVar/)：\n**MAVEN**\nmaven是常用项目构建的工具，下面是ubuntu下安装maven开发环境的命令：\n1.去官网下载最新的tar包，然后解压缩到到本地目录\n2.配置maven的环境变量：\n`vim ~/.bashrc`\n`export M2_HOME=mave主目录`\n`export PATH=$PATH:${M2_HOME}/bin`\n`source /etc/profile`\n3.测试：\n`mvn -v`\n**tomcat**\ntomcat是javaweb开发最常用的容器，下面是ubuntu下安装tomcat容器的命令：\n1.去官网下载最新的tar包，然后解压缩到到本地目录\n2.配置tomcat，进入tomcat目录下的bin目录，修改其startup.sh，在其中添加\n`JAVA_HOME=yourjdkdir`\n`JRE_HOME=${JAVA_HOME}/jre`\n`CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib`\n`PATH=${JAVA_HOME}/bin:$PATH`\n`TOMCAT_HOME=yourtomcatdir`\n注意要添加在`exec \"$PRGDIR\"/\"$EXECUTABLE\" start \"$@\"`之前。相应的网shutdownup.sh中也做相同的添加。\n3.修改manager，打开其conf目录下的tomcat-users.xml，在其中添加：\n`<role rolename=\"manager-gui\"/>`\n`<user username=\"yourusername\" password=\"yourpassword\" roles=\"manager-gui\"/>`\n保存相关的修改即可。\n4.启动tomcat\n`./startup.sh`\n当看到设立了shell中出现`tomcat started.`说明配置完成。可以打开浏览器，访问**localhost:8080**，当出现一个猫脸，你的tomcat就配置好了。","slug":"ubuntuEnv","published":1,"updated":"2016-10-23T05:33:46.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz9t001ebakzoorts6us","content":"<p>在使用ubuntu的时候会遇到各种开发环境的配置，由于ubuntu本身自带的源往往版本要比较陈旧，所以有些环境需要手动配置最新包。<br><a id=\"more\"></a><br>下面是关于java常用的开发环境的配置，在配置下面的这些环境时，请先安装<a href=\"https://ondelete.github.io/2016/10/06/configJavaEnvVar/\" target=\"_blank\" rel=\"external\">java</a>：<br><strong>MAVEN</strong><br>maven是常用项目构建的工具，下面是ubuntu下安装maven开发环境的命令：<br>1.去官网下载最新的tar包，然后解压缩到到本地目录<br>2.配置maven的环境变量：<br><code>vim ~/.bashrc</code><br><code>export M2_HOME=mave主目录</code><br><code>export PATH=$PATH:${M2_HOME}/bin</code><br><code>source /etc/profile</code><br>3.测试：<br><code>mvn -v</code><br><strong>tomcat</strong><br>tomcat是javaweb开发最常用的容器，下面是ubuntu下安装tomcat容器的命令：<br>1.去官网下载最新的tar包，然后解压缩到到本地目录<br>2.配置tomcat，进入tomcat目录下的bin目录，修改其startup.sh，在其中添加<br><code>JAVA_HOME=yourjdkdir</code><br><code>JRE_HOME=${JAVA_HOME}/jre</code><br><code>CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib</code><br><code>PATH=${JAVA_HOME}/bin:$PATH</code><br><code>TOMCAT_HOME=yourtomcatdir</code><br>注意要添加在<code>exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; start &quot;$@&quot;</code>之前。相应的网shutdownup.sh中也做相同的添加。<br>3.修改manager，打开其conf目录下的tomcat-users.xml，在其中添加：<br><code>&lt;role rolename=&quot;manager-gui&quot;/&gt;</code><br><code>&lt;user username=&quot;yourusername&quot; password=&quot;yourpassword&quot; roles=&quot;manager-gui&quot;/&gt;</code><br>保存相关的修改即可。<br>4.启动tomcat<br><code>./startup.sh</code><br>当看到设立了shell中出现<code>tomcat started.</code>说明配置完成。可以打开浏览器，访问<strong>localhost:8080</strong>，当出现一个猫脸，你的tomcat就配置好了。</p>\n","excerpt":"<p>在使用ubuntu的时候会遇到各种开发环境的配置，由于ubuntu本身自带的源往往版本要比较陈旧，所以有些环境需要手动配置最新包。<br>","more":"<br>下面是关于java常用的开发环境的配置，在配置下面的这些环境时，请先安装<a href=\"https://ondelete.github.io/2016/10/06/configJavaEnvVar/\">java</a>：<br><strong>MAVEN</strong><br>maven是常用项目构建的工具，下面是ubuntu下安装maven开发环境的命令：<br>1.去官网下载最新的tar包，然后解压缩到到本地目录<br>2.配置maven的环境变量：<br><code>vim ~/.bashrc</code><br><code>export M2_HOME=mave主目录</code><br><code>export PATH=$PATH:${M2_HOME}/bin</code><br><code>source /etc/profile</code><br>3.测试：<br><code>mvn -v</code><br><strong>tomcat</strong><br>tomcat是javaweb开发最常用的容器，下面是ubuntu下安装tomcat容器的命令：<br>1.去官网下载最新的tar包，然后解压缩到到本地目录<br>2.配置tomcat，进入tomcat目录下的bin目录，修改其startup.sh，在其中添加<br><code>JAVA_HOME=yourjdkdir</code><br><code>JRE_HOME=${JAVA_HOME}/jre</code><br><code>CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib</code><br><code>PATH=${JAVA_HOME}/bin:$PATH</code><br><code>TOMCAT_HOME=yourtomcatdir</code><br>注意要添加在<code>exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; start &quot;$@&quot;</code>之前。相应的网shutdownup.sh中也做相同的添加。<br>3.修改manager，打开其conf目录下的tomcat-users.xml，在其中添加：<br><code>&lt;role rolename=&quot;manager-gui&quot;/&gt;</code><br><code>&lt;user username=&quot;yourusername&quot; password=&quot;yourpassword&quot; roles=&quot;manager-gui&quot;/&gt;</code><br>保存相关的修改即可。<br>4.启动tomcat<br><code>./startup.sh</code><br>当看到设立了shell中出现<code>tomcat started.</code>说明配置完成。可以打开浏览器，访问<strong>localhost:8080</strong>，当出现一个猫脸，你的tomcat就配置好了。</p>"},{"title":"关于部署blog时重复输入用户名和密码的问题","date":"2016-10-04T13:29:42.000Z","_content":"在搭建完成hexo后，当向github部署blog时，出现了一些问题。一方面是部署的时间太漫长，另一个原因是部署的时候需要重复输入用户名和密码。利用搜索引擎进行了简单的搜索，发现是由于<!--more-->在hexo配置的时候选择的是github项目中的https链接，但是当改用ssh后，上述的两个问题便迎刃而解了。\n关于https和ssh的区别：使用https时不需要配置相关验证文件（相对而言初学时简单），多用于web访问；而ssh则需要配置一系列的验证，但是后者的优势是不需要在每次提交时重复输入用户信息进行验证，多用于文件传输。","source":"_posts/关于部署blog时重复输入用户名和密码的问题.md","raw":"---\ntitle: 关于部署blog时重复输入用户名和密码的问题\ndate: 2016-10-04 21:29:42\ntags: hexo\n---\n在搭建完成hexo后，当向github部署blog时，出现了一些问题。一方面是部署的时间太漫长，另一个原因是部署的时候需要重复输入用户名和密码。利用搜索引擎进行了简单的搜索，发现是由于<!--more-->在hexo配置的时候选择的是github项目中的https链接，但是当改用ssh后，上述的两个问题便迎刃而解了。\n关于https和ssh的区别：使用https时不需要配置相关验证文件（相对而言初学时简单），多用于web访问；而ssh则需要配置一系列的验证，但是后者的优势是不需要在每次提交时重复输入用户信息进行验证，多用于文件传输。","slug":"关于部署blog时重复输入用户名和密码的问题","published":1,"updated":"2016-10-23T02:38:42.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicz9v001hbakz5gzrgkpl","content":"<p>在搭建完成hexo后，当向github部署blog时，出现了一些问题。一方面是部署的时间太漫长，另一个原因是部署的时候需要重复输入用户名和密码。利用搜索引擎进行了简单的搜索，发现是由于<a id=\"more\"></a>在hexo配置的时候选择的是github项目中的https链接，但是当改用ssh后，上述的两个问题便迎刃而解了。<br>关于https和ssh的区别：使用https时不需要配置相关验证文件（相对而言初学时简单），多用于web访问；而ssh则需要配置一系列的验证，但是后者的优势是不需要在每次提交时重复输入用户信息进行验证，多用于文件传输。</p>\n","excerpt":"<p>在搭建完成hexo后，当向github部署blog时，出现了一些问题。一方面是部署的时间太漫长，另一个原因是部署的时候需要重复输入用户名和密码。利用搜索引擎进行了简单的搜索，发现是由于","more":"在hexo配置的时候选择的是github项目中的https链接，但是当改用ssh后，上述的两个问题便迎刃而解了。<br>关于https和ssh的区别：使用https时不需要配置相关验证文件（相对而言初学时简单），多用于web访问；而ssh则需要配置一系列的验证，但是后者的优势是不需要在每次提交时重复输入用户信息进行验证，多用于文件传输。</p>"},{"title":"实习结束三月后","date":"2016-10-23T12:14:56.000Z","_content":"*我是2016年7月5日结束实习的。\n我跟他们说我还会回去，大概是在寒假。\n我认识了很多的人，比我大学前三年认识的都多。\n要不是嘴巴笨，我都差点喜欢上一个。\n实习培训的时候，有个老师说这可能是你们今后很长时间最熟悉的记忆。\n那时我不以为然，因为很多的东西我都能忘记。\n我习惯了不动声色地消失，也不再重新出现时解释。\n现在好像也是如此，我只是不断地想起那时，却不去主动提起。\n但我知道终于再也回不去的时候，也好像没有什么。\n反正时间这种存在，终究难能阻挡。\n无论心情或者思绪，都是在短暂的波澜之后重新平静。\n年纪越长，时间就过得越快，解释为往后的每一天在你的人生中占的比重越来越少。\n另一种解释则是你接触的东西越多，新鲜的东西将会越少，重复的越多。\n记忆也不再深刻，因为得到的越来越少。\n实习的时候我得到了很多东西，我原本都有，只是我藏起来了。\n重新找回失去的东西，也会使新鲜的感觉增加，时间也会延长。\n昨天听到的一句歌词：“尚未发生的，都早已转折。”\n或许就是现在。*\n\n<!--more-->\n**-- 王小波 ** \n`其实我不喜欢现在的角色，一点也不喜欢。`\n`虽然岁月如流，什么都会过去，但是总有些东西发生了就不能抹煞。`\n","source":"_posts/实习.md","raw":"---\ntitle: 实习结束三月后\ndate: 2016-10-23 20:14:56\ntags: 实习\ncategories: mood\n---\n*我是2016年7月5日结束实习的。\n我跟他们说我还会回去，大概是在寒假。\n我认识了很多的人，比我大学前三年认识的都多。\n要不是嘴巴笨，我都差点喜欢上一个。\n实习培训的时候，有个老师说这可能是你们今后很长时间最熟悉的记忆。\n那时我不以为然，因为很多的东西我都能忘记。\n我习惯了不动声色地消失，也不再重新出现时解释。\n现在好像也是如此，我只是不断地想起那时，却不去主动提起。\n但我知道终于再也回不去的时候，也好像没有什么。\n反正时间这种存在，终究难能阻挡。\n无论心情或者思绪，都是在短暂的波澜之后重新平静。\n年纪越长，时间就过得越快，解释为往后的每一天在你的人生中占的比重越来越少。\n另一种解释则是你接触的东西越多，新鲜的东西将会越少，重复的越多。\n记忆也不再深刻，因为得到的越来越少。\n实习的时候我得到了很多东西，我原本都有，只是我藏起来了。\n重新找回失去的东西，也会使新鲜的感觉增加，时间也会延长。\n昨天听到的一句歌词：“尚未发生的，都早已转折。”\n或许就是现在。*\n\n<!--more-->\n**-- 王小波 ** \n`其实我不喜欢现在的角色，一点也不喜欢。`\n`虽然岁月如流，什么都会过去，但是总有些东西发生了就不能抹煞。`\n","slug":"实习","published":1,"updated":"2016-10-23T12:57:49.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxicza5001kbakzz4emw5b3","content":"<p><em>我是2016年7月5日结束实习的。<br>我跟他们说我还会回去，大概是在寒假。<br>我认识了很多的人，比我大学前三年认识的都多。<br>要不是嘴巴笨，我都差点喜欢上一个。<br>实习培训的时候，有个老师说这可能是你们今后很长时间最熟悉的记忆。<br>那时我不以为然，因为很多的东西我都能忘记。<br>我习惯了不动声色地消失，也不再重新出现时解释。<br>现在好像也是如此，我只是不断地想起那时，却不去主动提起。<br>但我知道终于再也回不去的时候，也好像没有什么。<br>反正时间这种存在，终究难能阻挡。<br>无论心情或者思绪，都是在短暂的波澜之后重新平静。<br>年纪越长，时间就过得越快，解释为往后的每一天在你的人生中占的比重越来越少。<br>另一种解释则是你接触的东西越多，新鲜的东西将会越少，重复的越多。<br>记忆也不再深刻，因为得到的越来越少。<br>实习的时候我得到了很多东西，我原本都有，只是我藏起来了。<br>重新找回失去的东西，也会使新鲜的感觉增加，时间也会延长。<br>昨天听到的一句歌词：“尚未发生的，都早已转折。”<br>或许就是现在。</em></p>\n<a id=\"more\"></a>\n<p><strong>– 王小波 </strong><br><code>其实我不喜欢现在的角色，一点也不喜欢。</code><br><code>虽然岁月如流，什么都会过去，但是总有些东西发生了就不能抹煞。</code></p>\n","excerpt":"<p><em>我是2016年7月5日结束实习的。<br>我跟他们说我还会回去，大概是在寒假。<br>我认识了很多的人，比我大学前三年认识的都多。<br>要不是嘴巴笨，我都差点喜欢上一个。<br>实习培训的时候，有个老师说这可能是你们今后很长时间最熟悉的记忆。<br>那时我不以为然，因为很多的东西我都能忘记。<br>我习惯了不动声色地消失，也不再重新出现时解释。<br>现在好像也是如此，我只是不断地想起那时，却不去主动提起。<br>但我知道终于再也回不去的时候，也好像没有什么。<br>反正时间这种存在，终究难能阻挡。<br>无论心情或者思绪，都是在短暂的波澜之后重新平静。<br>年纪越长，时间就过得越快，解释为往后的每一天在你的人生中占的比重越来越少。<br>另一种解释则是你接触的东西越多，新鲜的东西将会越少，重复的越多。<br>记忆也不再深刻，因为得到的越来越少。<br>实习的时候我得到了很多东西，我原本都有，只是我藏起来了。<br>重新找回失去的东西，也会使新鲜的感觉增加，时间也会延长。<br>昨天听到的一句歌词：“尚未发生的，都早已转折。”<br>或许就是现在。</em></p>","more":"<p><strong>– 王小波 </strong><br><code>其实我不喜欢现在的角色，一点也不喜欢。</code><br><code>虽然岁月如流，什么都会过去，但是总有些东西发生了就不能抹煞。</code></p>"},{"title":"关于map的迭代方式","date":"2016-10-09T19:39:04.000Z","_content":"最近复习java集合框架，正好看到github上有关于java中map的迭代，本来以为熟悉的点，没想到看过去就忘记了。随即又重新打开eclipse，一边看源码，一边重新敲了一下代码。\n具体的代码如下：（正好可以测试一下hexo的语法高亮）\n<!--more-->\n```java\n//学生类\npublic class Student {\n\t\n\tprivate String name;\n\tprivate int age;\n\tprivate String school;\n\t\n\tpublic Student(){}\n\t\n\tpublic Student(String name, int age, String school) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.school = school;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\n\tpublic String getSchool() {\n\t\treturn school;\n\t}\t\n}\n```\n\n```java\nMap<String, Student> students = new HashMap<>();\n\t\tstudents.put(\"001\", new Student(\"Kobe\", 25, \"SouthWest\"));\n\t\tstudents.put(\"002\", new Student(\"Allen\", 23, \"SouthWest\"));\n\t\tstudents.put(\"003\", new Student(\"James\", 20, \"SouthWest\"));\n\n\t\t// 使用foreach迭代\n\t\tSet<Map.Entry<String, Student>> sets = students.entrySet();\n\t\tfor (Map.Entry<String, Student> entry : sets) {\n\t\t\tSystem.out.println(\"编号：\" + entry.getKey() + \" 学生姓名：\" + entry.getValue().getName());\n\t\t}\n\t\t//分别迭代value和key\n\t\tSet<String> keys = students.keySet();\n\t\tCollection<Student> collection = students.values();\n\t\tfor(String key:keys){\n\t\t\tSystem.out.println(\"编号：\" + key);\n\t\t}\n\t\tfor(Student student:collection){\n\t\t\tSystem.out.println(\"student name:\" + student.getName() + \" student age:\" + student.getAge() + \" school:\" + student.getSchool());\n\t\t}\n\t\t//使用iterator进行迭代\n\t\tIterator<Map.Entry<String, Student>> iterator = sets.iterator();\n\t\twhile(iterator.hasNext()){\n\t\t\tMap.Entry<String, Student> student = iterator.next();\n\t\t\tSystem.out.println(\"编号：\" + student.getKey() + \" 学生姓名：\" +student.getValue().getName());\n\n```\n在迭代的过程中要涉及到泛型的一些用法，还好有IDE。\n\n记于九九重阳。","source":"_posts/mapIterator.md","raw":"---\ntitle: 关于map的迭代方式\ndate: 2016-10-10 03:39:04\ntags: [map,iterator]\ncategories: JavaSE\n---\n最近复习java集合框架，正好看到github上有关于java中map的迭代，本来以为熟悉的点，没想到看过去就忘记了。随即又重新打开eclipse，一边看源码，一边重新敲了一下代码。\n具体的代码如下：（正好可以测试一下hexo的语法高亮）\n<!--more-->\n```java\n//学生类\npublic class Student {\n\t\n\tprivate String name;\n\tprivate int age;\n\tprivate String school;\n\t\n\tpublic Student(){}\n\t\n\tpublic Student(String name, int age, String school) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.school = school;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\n\tpublic String getSchool() {\n\t\treturn school;\n\t}\t\n}\n```\n\n```java\nMap<String, Student> students = new HashMap<>();\n\t\tstudents.put(\"001\", new Student(\"Kobe\", 25, \"SouthWest\"));\n\t\tstudents.put(\"002\", new Student(\"Allen\", 23, \"SouthWest\"));\n\t\tstudents.put(\"003\", new Student(\"James\", 20, \"SouthWest\"));\n\n\t\t// 使用foreach迭代\n\t\tSet<Map.Entry<String, Student>> sets = students.entrySet();\n\t\tfor (Map.Entry<String, Student> entry : sets) {\n\t\t\tSystem.out.println(\"编号：\" + entry.getKey() + \" 学生姓名：\" + entry.getValue().getName());\n\t\t}\n\t\t//分别迭代value和key\n\t\tSet<String> keys = students.keySet();\n\t\tCollection<Student> collection = students.values();\n\t\tfor(String key:keys){\n\t\t\tSystem.out.println(\"编号：\" + key);\n\t\t}\n\t\tfor(Student student:collection){\n\t\t\tSystem.out.println(\"student name:\" + student.getName() + \" student age:\" + student.getAge() + \" school:\" + student.getSchool());\n\t\t}\n\t\t//使用iterator进行迭代\n\t\tIterator<Map.Entry<String, Student>> iterator = sets.iterator();\n\t\twhile(iterator.hasNext()){\n\t\t\tMap.Entry<String, Student> student = iterator.next();\n\t\t\tSystem.out.println(\"编号：\" + student.getKey() + \" 学生姓名：\" +student.getValue().getName());\n\n```\n在迭代的过程中要涉及到泛型的一些用法，还好有IDE。\n\n记于九九重阳。","slug":"mapIterator","published":1,"updated":"2016-10-23T02:38:42.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxiczjz002ibakz1gq5uadl","content":"<p>最近复习java集合框架，正好看到github上有关于java中map的迭代，本来以为熟悉的点，没想到看过去就忘记了。随即又重新打开eclipse，一边看源码，一边重新敲了一下代码。<br>具体的代码如下：（正好可以测试一下hexo的语法高亮）<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//学生类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String school;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, String school)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.school = school;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSchool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> school;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map&lt;String, Student&gt; students = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">\t\tstudents.put(<span class=\"string\">\"001\"</span>, <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Kobe\"</span>, <span class=\"number\">25</span>, <span class=\"string\">\"SouthWest\"</span>));</div><div class=\"line\">\t\tstudents.put(<span class=\"string\">\"002\"</span>, <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Allen\"</span>, <span class=\"number\">23</span>, <span class=\"string\">\"SouthWest\"</span>));</div><div class=\"line\">\t\tstudents.put(<span class=\"string\">\"003\"</span>, <span class=\"keyword\">new</span> Student(<span class=\"string\">\"James\"</span>, <span class=\"number\">20</span>, <span class=\"string\">\"SouthWest\"</span>));</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 使用foreach迭代</span></div><div class=\"line\">\t\tSet&lt;Map.Entry&lt;String, Student&gt;&gt; sets = students.entrySet();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;String, Student&gt; entry : sets) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"编号：\"</span> + entry.getKey() + <span class=\"string\">\" 学生姓名：\"</span> + entry.getValue().getName());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//分别迭代value和key</span></div><div class=\"line\">\t\tSet&lt;String&gt; keys = students.keySet();</div><div class=\"line\">\t\tCollection&lt;Student&gt; collection = students.values();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(String key:keys)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"编号：\"</span> + key);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(Student student:collection)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"student name:\"</span> + student.getName() + <span class=\"string\">\" student age:\"</span> + student.getAge() + <span class=\"string\">\" school:\"</span> + student.getSchool());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//使用iterator进行迭代</span></div><div class=\"line\">\t\tIterator&lt;Map.Entry&lt;String, Student&gt;&gt; iterator = sets.iterator();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(iterator.hasNext())&#123;</div><div class=\"line\">\t\t\tMap.Entry&lt;String, Student&gt; student = iterator.next();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"编号：\"</span> + student.getKey() + <span class=\"string\">\" 学生姓名：\"</span> +student.getValue().getName());</div></pre></td></tr></table></figure>\n<p>在迭代的过程中要涉及到泛型的一些用法，还好有IDE。</p>\n<p>记于九九重阳。</p>\n","excerpt":"<p>最近复习java集合框架，正好看到github上有关于java中map的迭代，本来以为熟悉的点，没想到看过去就忘记了。随即又重新打开eclipse，一边看源码，一边重新敲了一下代码。<br>具体的代码如下：（正好可以测试一下hexo的语法高亮）<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//学生类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String school;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, String school)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">super</span>();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.school = school;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> age;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSchool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> school;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map&lt;String, Student&gt; students = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">\t\tstudents.put(<span class=\"string\">\"001\"</span>, <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Kobe\"</span>, <span class=\"number\">25</span>, <span class=\"string\">\"SouthWest\"</span>));</div><div class=\"line\">\t\tstudents.put(<span class=\"string\">\"002\"</span>, <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Allen\"</span>, <span class=\"number\">23</span>, <span class=\"string\">\"SouthWest\"</span>));</div><div class=\"line\">\t\tstudents.put(<span class=\"string\">\"003\"</span>, <span class=\"keyword\">new</span> Student(<span class=\"string\">\"James\"</span>, <span class=\"number\">20</span>, <span class=\"string\">\"SouthWest\"</span>));</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 使用foreach迭代</span></div><div class=\"line\">\t\tSet&lt;Map.Entry&lt;String, Student&gt;&gt; sets = students.entrySet();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;String, Student&gt; entry : sets) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"编号：\"</span> + entry.getKey() + <span class=\"string\">\" 学生姓名：\"</span> + entry.getValue().getName());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//分别迭代value和key</span></div><div class=\"line\">\t\tSet&lt;String&gt; keys = students.keySet();</div><div class=\"line\">\t\tCollection&lt;Student&gt; collection = students.values();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(String key:keys)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"编号：\"</span> + key);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(Student student:collection)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"student name:\"</span> + student.getName() + <span class=\"string\">\" student age:\"</span> + student.getAge() + <span class=\"string\">\" school:\"</span> + student.getSchool());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//使用iterator进行迭代</span></div><div class=\"line\">\t\tIterator&lt;Map.Entry&lt;String, Student&gt;&gt; iterator = sets.iterator();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(iterator.hasNext())&#123;</div><div class=\"line\">\t\t\tMap.Entry&lt;String, Student&gt; student = iterator.next();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"编号：\"</span> + student.getKey() + <span class=\"string\">\" 学生姓名：\"</span> +student.getValue().getName());</div></pre></td></tr></table></figure>\n<p>在迭代的过程中要涉及到泛型的一些用法，还好有IDE。</p>\n<p>记于九九重阳。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"civxicz6r0000bakzs7dicquw","category_id":"civxicz7d0003bakzkbagij69","_id":"civxicz88000cbakzpwtyi2zm"},{"post_id":"civxicz7z000bbakz5pb8pabs","category_id":"civxicz7d0003bakzkbagij69","_id":"civxicz8g000ibakz9fiarh52"},{"post_id":"civxicz720002bakzznpb6vhd","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxicz8n000mbakzyuxewu1n"},{"post_id":"civxicz89000dbakzo050r6hx","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxicz8u000pbakzbwhb5ktt"},{"post_id":"civxicz8e000gbakzpangk3w8","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxicz92000sbakz511imptb"},{"post_id":"civxicz7l0005bakzb6i8tfbn","category_id":"civxicz8a000ebakzm4mulnse","_id":"civxicz96000wbakzcecwcplc"},{"post_id":"civxicz7t0006bakzu75zsrtt","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxicz9g000zbakzngauhadn"},{"post_id":"civxicz8z000qbakzqvpifbfy","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxicz9i0013bakzw8dqwhh9"},{"post_id":"civxicz93000ubakzlstlarry","category_id":"civxicz8a000ebakzm4mulnse","_id":"civxicz9k0016bakzy1fda3al"},{"post_id":"civxicz7v0007bakzfnpf02re","category_id":"civxicz91000rbakz953341m0","_id":"civxicz9o001abakzf11ru2yp"},{"post_id":"civxicz96000xbakza922xprq","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxicz9q001dbakz86h5uq2l"},{"post_id":"civxicz9j0015bakz32y0iefg","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxicz9v001gbakz7sb0lhqy"},{"post_id":"civxicz8h000jbakznfo8qzy6","category_id":"civxicz9g0010bakz42v7it99","_id":"civxicza3001jbakz8xf8ug67"},{"post_id":"civxicz9l0017bakzvn1ausnz","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxiczaa001mbakzrgbpp8lh"},{"post_id":"civxicz9o001bbakzrr73odzo","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxiczac001qbakz84qyjzjb"},{"post_id":"civxicz8q000nbakzxlz74t9b","category_id":"civxicz9m0018bakzxf0ji2ju","_id":"civxiczad001rbakzuyrjsa3j"},{"post_id":"civxicz9t001ebakzoorts6us","category_id":"civxicz7d0003bakzkbagij69","_id":"civxiczaf001tbakzw6z26w1g"},{"post_id":"civxicza5001kbakzz4emw5b3","category_id":"civxiczac001pbakzbd2knb24","_id":"civxiczai001wbakzxhjeslwu"},{"post_id":"civxiczjz002ibakz1gq5uadl","category_id":"civxicz7x0008bakzq4by8uk7","_id":"civxiczk6002lbakzda31oeyp"}],"PostTag":[{"post_id":"civxicz6r0000bakzs7dicquw","tag_id":"civxicz7k0004bakzxv4ty9ih","_id":"civxicz7z000abakzu38qst65"},{"post_id":"civxicz720002bakzznpb6vhd","tag_id":"civxicz7y0009bakz9s1lk8ep","_id":"civxicz8f000hbakza45ws6wa"},{"post_id":"civxicz7l0005bakzb6i8tfbn","tag_id":"civxicz8b000fbakz2isk2bgf","_id":"civxicz8u000obakzwu5hn84d"},{"post_id":"civxicz7t0006bakzu75zsrtt","tag_id":"civxicz8m000lbakzpjaxehtx","_id":"civxicz96000vbakzg3cmrds6"},{"post_id":"civxicz93000ubakzlstlarry","tag_id":"civxicz8b000fbakz2isk2bgf","_id":"civxicz9g000ybakzccgz38s2"},{"post_id":"civxicz7v0007bakzfnpf02re","tag_id":"civxicz93000tbakzptbtmxny","_id":"civxicz9j0014bakzsfeagz13"},{"post_id":"civxicz7z000bbakz5pb8pabs","tag_id":"civxicz9i0012bakzhhhvfqut","_id":"civxicz9p001cbakzxtbb11zl"},{"post_id":"civxicz89000dbakzo050r6hx","tag_id":"civxicz7k0004bakzxv4ty9ih","_id":"civxicza3001ibakzlp2so4et"},{"post_id":"civxicz89000dbakzo050r6hx","tag_id":"civxicz9n0019bakzt3x4csai","_id":"civxiczaa001lbakzn3gu0slw"},{"post_id":"civxicz8e000gbakzpangk3w8","tag_id":"civxicz9u001fbakzyuk4ic7y","_id":"civxiczab001obakzfq2y2jpj"},{"post_id":"civxicz8h000jbakznfo8qzy6","tag_id":"civxiczab001nbakzs32it8sp","_id":"civxiczaf001ubakzcry64zid"},{"post_id":"civxicz8q000nbakzxlz74t9b","tag_id":"civxiczad001sbakzge6sbi0k","_id":"civxiczai001xbakzk16z7wz9"},{"post_id":"civxicz8z000qbakzqvpifbfy","tag_id":"civxiczag001vbakzqyifnoqv","_id":"civxiczak001zbakztr7774jr"},{"post_id":"civxicz96000xbakza922xprq","tag_id":"civxiczaj001ybakzi4bw7q0l","_id":"civxiczam0021bakzaqdv2a0f"},{"post_id":"civxicz9g0011bakzspa6wfsy","tag_id":"civxiczak0020bakzbs4jbiz2","_id":"civxiczam0023bakzs521w9l3"},{"post_id":"civxicz9j0015bakz32y0iefg","tag_id":"civxiczam0022bakzx5fddwk5","_id":"civxiczan0025bakzdvgeeu96"},{"post_id":"civxicz9l0017bakzvn1ausnz","tag_id":"civxiczan0024bakzd0d08dyl","_id":"civxiczao0027bakzlqbjb6q9"},{"post_id":"civxicz9o001bbakzrr73odzo","tag_id":"civxiczan0026bakzlwg70arj","_id":"civxiczaq0029bakz0r0jdrru"},{"post_id":"civxicz9t001ebakzoorts6us","tag_id":"civxiczao0028bakz93bet3ey","_id":"civxiczat002cbakza0zt54da"},{"post_id":"civxicz9t001ebakzoorts6us","tag_id":"civxiczaq002abakz8vmd5nil","_id":"civxiczat002dbakzq6jjee15"},{"post_id":"civxicz9v001hbakz5gzrgkpl","tag_id":"civxiczad001sbakzge6sbi0k","_id":"civxiczau002fbakzewplireu"},{"post_id":"civxicza5001kbakzz4emw5b3","tag_id":"civxiczat002ebakz3admgn8c","_id":"civxiczau002gbakz3vu8rtlb"},{"post_id":"civxiczjz002ibakz1gq5uadl","tag_id":"civxiczk5002kbakzuzihybs0","_id":"civxiczk8002nbakz885xte70"},{"post_id":"civxiczjz002ibakz1gq5uadl","tag_id":"civxiczk7002mbakz9831h0ci","_id":"civxiczk8002obakz7nsww34z"}],"Tag":[{"name":"IO","_id":"civxicz7k0004bakzxv4ty9ih"},{"name":"Exception","_id":"civxicz7y0009bakz9s1lk8ep"},{"name":"linux","_id":"civxicz8b000fbakz2isk2bgf"},{"name":"array","_id":"civxicz8m000lbakzpjaxehtx"},{"name":"重庆","_id":"civxicz93000tbakzptbtmxny"},{"name":"java环境变量","_id":"civxicz9i0012bakzhhhvfqut"},{"name":"File","_id":"civxicz9n0019bakzt3x4csai"},{"name":"泛型","_id":"civxicz9u001fbakzyuk4ic7y"},{"name":"idea","_id":"civxiczab001nbakzs32it8sp"},{"name":"hexo","_id":"civxiczad001sbakzge6sbi0k"},{"name":"GC","_id":"civxiczag001vbakzqyifnoqv"},{"name":"多线程","_id":"civxiczaj001ybakzi4bw7q0l"},{"name":"reading books","_id":"civxiczak0020bakzbs4jbiz2"},{"name":"面试","_id":"civxiczam0022bakzx5fddwk5"},{"name":"sha1","_id":"civxiczan0024bakzd0d08dyl"},{"name":"tips","_id":"civxiczan0026bakzlwg70arj"},{"name":"maven","_id":"civxiczao0028bakz93bet3ey"},{"name":"tomcat","_id":"civxiczaq002abakz8vmd5nil"},{"name":"实习","_id":"civxiczat002ebakz3admgn8c"},{"name":"map","_id":"civxiczk5002kbakzuzihybs0"},{"name":"iterator","_id":"civxiczk7002mbakz9831h0ci"}]}}